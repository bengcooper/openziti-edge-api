openapi: 3.0.1
info:
  title: Ziti Edge Client
  description: OpenZiti Edge Client API
  contact:
    name: OpenZiti
    url: https://openziti.discourse.group
    email: help@openziti.org
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.26.30
servers:
- url: https://demo.ziti.dev/edge/client/v1
paths:
  /:
    get:
      tags:
      - Informational
      summary: Returns version information
      operationId: listRoot
      responses:
        "200":
          description: Version information for the controller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listVersionEnvelope'
      security: []
  /.well-known/est/cacerts:
    get:
      tags:
      - Well Known
      summary: Get CA Cert Store
      description: |
        This endpoint is used during enrollments to bootstrap trust between enrolling clients and the Ziti Edge API.
        This endpoint returns a base64 encoded PKCS7 store. The content can be base64 decoded and parsed by any library
        that supports parsing PKCS7 stores.
      operationId: listWellKnownCas
      responses:
        "200":
          description: A base64 encoded PKCS7 store
          content:
            application/pkcs7-mime:
              schema:
                type: string
                example: |
                  MIIMUQYJKoZIhvcNAQcCoIIMQjCCDD4CAQExADALBgkqhkiG9w0BBwGgggwkMIIG
                  BjCCA+6gAwIBAgICEAAwDQYJKoZIhvcNAQELBQAwgZcxCzAJBgNVBAYTAlVTMRcw
                  FQYDVQQIDA5Ob3J0aCBDYXJvbGluYTESMBAGA1UEBwwJQ2hhcmxvdHRlMRMwEQYD
                  VQQKDApOZXRGb3VuZHJ5MSkwJwYDVQQLDCBOZXRGb3VuZHJ5IENlcnRpZmljYXRl
                  IEF1dGhvcml0eTEbMBkGA1UEAwwSTmV0Rm91bmRyeSBSb290IENBMB4XDTE4MDUx
                  ODE2NTcyM1oXDTI4MDUxNTE2NTcyM1owgYsxCzAJBgNVBAYTAlVTMRcwFQYDVQQI
                  DA5Ob3J0aCBDYXJvbGluYTETMBEGA1UECgwKTmV0Rm91bmRyeTEpMCcGA1UECwwg
                  TmV0Rm91bmRyeSBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkxIzAhBgNVBAMMGk5ldEZv
                  dW5kcnkgSW50ZXJtZWRpYXRlIENBMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIIC
                  CgKCAgEAsb1EPhMUweS9WpjT7L54xAOmZqugJ6fhSrFfLUwNUy172q+ASvZTpT1z
                  KIPcZpGmPB3TX2bHaAR67BbRkUR11JgWE3U8+FsGrYmPZtaKM6fg8Mh0WZ41oMYQ
                  NJyQixOktrgqfybyJoT5PeT5AA7QQmd8mku2X9nkAu6gWPf2nHNc7SeQdijmyQQa
                  VK3oqyaxOzWzsU/XbfMEz/ObkefUxgt5Z6jlK0xcW0Q+QgtawMKLUiuo6obWRPcl
                  7Hm9Sze8XJS5pbvS5JkUszxoRZuDVHZylrlHIpA/IL+BnvS+M7SP28UWe9skrv/s
                  6ACpJtuPJ1EYf5fakugOpY7i+hq7YNi//csbc49Qjn2OtttrR7JcTaHUEU1I/tQb
                  QGAtNkI4pJjRVUdDawQFQlWHZD1COixNLErs2HzAI00DhLrY6SKITI/kjN0Xx010
                  XdMcdfay0PLWm6RwxiRmMQFL4GNIC895NF1q6xV4W4rWgqUNlcvKpy+i1chWpRbU
                  He16ul0qh10fcESrRvAbXn5YrQJLrwbSr+85ubN8lYdNLE0qg2cIXZlUilarZZzW
                  ghtCe+KkUpjfRuAi/CqfSwNK3QXEfeVEK6S49mHeSekOizFIw7fmDhCz9vXwMOnb
                  ryRSLEJks0gIRcSDVChXheAqC98y4kcQdniNWFnqJXoqA+rrSokCAwEAAaNmMGQw
                  HQYDVR0OBBYEFK8UXC/sq6dGVFAqEXHsQDzqzwuUMB8GA1UdIwQYMBaAFEHz6RRu
                  OuXj2mwAzOeUinfWeivpMBIGA1UdEwEB/wQIMAYBAf8CAQAwDgYDVR0PAQH/BAQD
                  AgGGMA0GCSqGSIb3DQEBCwUAA4ICAQBDAAaOE2Nbb49eOjyTNxIeOB+ZKQjJ1hUE
                  gRrootAA8NYbtKW/vyxTWnNi5XOGXd4DFS9OKZ0mL/7NyLc0mbTwPH2ZT8KTPUTS
                  Cpo6yktZ/7TMjyAtWZiOMg2EH+6m/nlNSXk/v5fb8+JQLdZfpxoA017dHh3tc8l7
                  KOskCZNwQHgF/YMXrPXUNbsGkXRuJLtpjPw5O9GvPys7p+a1aJH1WCTly9zfB6j+
                  rMF+UGCPDT30sxitVlohik83j6pKLgEAP/gi8nJbILlTP7ce+gJeHR2tfDvmK91X
                  6QgCF2STUFBU7/9H1/pPRRykOxQpAd8xqSgqGEyp9Ie4tysZjwoUEnG8IVJ5ykrI
                  Fximvnb4B+LABV9WEo08n8m1R8wEryrISi8fBPn3Pr5nuayOfFLa15CLTkZF40FN
                  8ika1qNZy8bWRDwTZJQUUb7VCheRWcMwdZdNmhl3J+VZLpQ+ruW7b2ajwacHz5Nw
                  BHKNcmxXb/4vHq/BnlcayHnSqT6036+OZQ+owDegcYmWV6LaM7xLErjHz2EE38M2
                  YSiW5SU1zluDe+iHb6l3Gd3Fj/X1gkMWFgYh0XPMSUSyimLNYzy4THKzmWlcQNFo
                  LLiIDbLrMt+vk+vBkIsNTTPXRJOFPBhmIF6uIUj+2YhzNotX/pQtqMKms3pPlmHq
                  dH6biwygETCCBhYwggP+oAMCAQICCQDquKpymLJ5WzANBgkqhkiG9w0BAQsFADCB
                  lzELMAkGA1UEBhMCVVMxFzAVBgNVBAgMDk5vcnRoIENhcm9saW5hMRIwEAYDVQQH
                  DAlDaGFybG90dGUxEzARBgNVBAoMCk5ldEZvdW5kcnkxKTAnBgNVBAsMIE5ldEZv
                  dW5kcnkgQ2VydGlmaWNhdGUgQXV0aG9yaXR5MRswGQYDVQQDDBJOZXRGb3VuZHJ5
                  IFJvb3QgQ0EwHhcNMTgwNTE4MTY1NDQ3WhcNMzgwNTEzMTY1NDQ3WjCBlzELMAkG
                  A1UEBhMCVVMxFzAVBgNVBAgMDk5vcnRoIENhcm9saW5hMRIwEAYDVQQHDAlDaGFy
                  bG90dGUxEzARBgNVBAoMCk5ldEZvdW5kcnkxKTAnBgNVBAsMIE5ldEZvdW5kcnkg
                  Q2VydGlmaWNhdGUgQXV0aG9yaXR5MRswGQYDVQQDDBJOZXRGb3VuZHJ5IFJvb3Qg
                  Q0EwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDKq/Xa+749Cr3WJGYD
                  DIEtNKIRnTFc6TeiRSm/O7hG2+1Nrh/dObjZJuDjsopWP8NFA/DwlNyEphYKAeSw
                  HDmu+4nFd6ifoeDE2lYq6bNhLcgN+A3MlN5Phb2rnO32YYZwHXGWov+jtd2gaK0f
                  WsH8CQxn6n2v7qvPMTeYFP8p4jqTZw2bvZWw+LMYTFCy541DFqQLQasMg10mXRAV
                  XO7Oa9y+D1re1zLq4wS6u8ItJoKzfmvZkMvD90C/tQ4u0iJaL7GB2SE9MOPDeGVv
                  pnoSAIkSVmvRDUAj2x9PuukykzoL1OAWzc5Cg+5LxRmLejVE7PvPcHaTtNag2tRD
                  w2vbMeFKN8NvQH1QYcaPWZe4Vl9b6DAuTaH5RN919H/F+ZHyjZybVPwC14lflneI
                  KyNy8JEV/YMIbEADWnuiedzDehk2Opn+0+9Zr2X/xfjCo8iWHFbNaVnQX7wdRaOo
                  783lEouncqe46FDBLBpyAuDKHQpIT3MK8rkC/1yBNxsH44vMweUZuK0u7PC9KHtm
                  pQfuflYGfxA34kY6WU3jzyQHetoLYjoxTqNEEjuGpwy2o1j7RaCBEFIbYlnlbhpE
                  WFTaQf96z2GQ6m1U3y7JyDflHSu9Fo1JNkG3qXsjDwda/6W7NRJRgdFrhnOwrm7F
                  6L9X4P1HnzU/VJL66LwPmiHVjQIDAQABo2MwYTAdBgNVHQ4EFgQUQfPpFG465ePa
                  bADM55SKd9Z6K+kwHwYDVR0jBBgwFoAUQfPpFG465ePabADM55SKd9Z6K+kwDwYD
                  VR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAYYwDQYJKoZIhvcNAQELBQADggIB
                  ACfU74aKWROaxnue8tZb5PFkEbnDRcRrKXRhnptA0vrgB4ydnYxX9hEBZD8o6PBy
                  3rewvl5meSOBE6zyb4JD80lHdzHSVFIwbzsNOeEjCslv/PA/3Y+J7DCt6gPNMDeY
                  uEssdqeSiMoYz2gnven4flSMKgTAJd3/SpVrn35HzXiU9MkmFVpPEMnTctOjw+Jn
                  cCkG5+D9N14dxtgZ/tUfbH+GUfhyGVxRdPrX5KQqAyapMfEaMXXa8KNs7PG+sDiS
                  WI+Sg9jUGtxgkfKdVNtFW+QMXyy7eT3iXPA+1r2hFAhgfIaGtBJUhxPHMhKtjbAg
                  AX+6+2D3GAbaD1+lcQHhKry3hygQ3OX79FJW6zyPS0tiV/LfovHqX/3x9q5PTVBO
                  wEOS2/LCc4R2M7S+HIPf4eSJ+nH4uCIdJ42WCror/mRsuL7geCksi70GHuCynP4y
                  qQFszu/UtbBEsN8loTnLpOInxaGB1Y8UPm14b2Lo1/3HkoMVh0/UaHJ0TmnZ1r7m
                  fGhfRyAZYRdvT1sB+Eb4b5A2zEZqsTc9IwFOhnI4ZilPoZ5s2xejqrVw3GSvovEh
                  dprrQmvxuh+VQ23y/+/4z9b2xWyDu2zVveB4whqPe2rkgxJrEl4GfLk2DW+dN6j8
                  3Zl4lPoUZYwzkC6raCaHyFlAoaTbqz0H6rvVJYxJPS6UoQAxAA==
      security: []
  /authenticate:
    post:
      tags:
      - Authentication
      summary: Authenticate via a method supplied via a query string parameter
      description: |
        Allowed authentication methods include "password", "cert", and "ext-jwt"
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authenticate'
        required: false
      responses:
        "200":
          description: The API session associated with the session used to issue the
            request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/currentApiSessionDetailEnvelope'
            default:
              example:
                data:
                  _links:
                    self:
                      href: ./current-api-session
                  configTypes: []
                  createdAt: 2020-03-09T19:03:49.1883693Z
                  expiresAt: 2020-03-09T19:34:21.5600897Z
                  id: 27343114-b44f-406e-9981-f3c4f2f28d54
                  identity:
                    _links:
                      self:
                        href: ./identities/66352d7b-a6b2-4ce9-85bb-9f18e318704d
                    id: 66352d7b-a6b2-4ce9-85bb-9f18e318704d
                    name: Default Admin
                    urlName: identities
                  tags:
                  - userField1: 123
                  - userField2: asdf
                  token: 28bb0ed2-0577-4632-ae70-d17106b92871
                  updatedAt: 2020-03-09T19:04:21.5600897Z
                meta: {}
        "400":
          description: "The supplied request contains invalid fields or could not\
            \ be parsed (json and non-json bodies). The error's code, message, and\
            \ cause fields can be inspected for further information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause:
                    details:
                      context: (root)
                      field: (root)
                      property: fooField3
                    field: (root)
                    message: "(root): fooField3 is required"
                    type: required
                    value:
                      fooField: abc
                      fooField2: def
                  causeMessage: schema validation failed
                  code: COULD_NOT_VALIDATE
                  message: The supplied request contains an invalid document
                  requestId: ac6766d6-3a09-44b3-8d8a-1b541d97fdd9
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "401":
          description: The authentication request could not be processed as the credentials
            are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: INVALID_AUTH
                  message: The authentication request failed
                  requestId: 5952ed10-3091-474f-a691-47ebab6990dc
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security: []
      x-codegen-request-body-name: auth
    parameters:
    - name: method
      in: query
      required: true
      schema:
        type: string
        enum:
        - password
        - cert
        - ext-jwt
  /authenticate/mfa:
    post:
      tags:
      - Authentication
      - MFA
      summary: Complete MFA authentication
      description: Completes MFA authentication by submitting a MFA time based one
        time token or backup code.
      operationId: authenticateMfa
      requestBody:
        description: An MFA validation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mfaCode'
        required: true
      responses:
        "200":
          description: Base empty response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty'
        "401":
          description: Base empty response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty'
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
      x-codegen-request-body-name: mfaAuth
  /controllers:
    get:
      tags:
      - Controllers
      summary: List controllers
      description: Retrieves a list of controllers
      operationId: listControllers
      parameters:
      - name: limit
        in: query
        schema:
          type: integer
      - name: offset
        in: query
        schema:
          type: integer
      - name: filter
        in: query
        schema:
          type: string
      responses:
        "200":
          description: A list of controllers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listControllersEnvelope'
        "400":
          description: "The supplied request contains invalid fields or could not\
            \ be parsed (json and non-json bodies). The error's code, message, and\
            \ cause fields can be inspected for further information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause:
                    details:
                      context: (root)
                      field: (root)
                      property: fooField3
                    field: (root)
                    message: "(root): fooField3 is required"
                    type: required
                    value:
                      fooField: abc
                      fooField2: def
                  causeMessage: schema validation failed
                  code: COULD_NOT_VALIDATE
                  message: The supplied request contains an invalid document
                  requestId: ac6766d6-3a09-44b3-8d8a-1b541d97fdd9
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
  /current-api-session:
    get:
      tags:
      - Current API Session
      summary: Return the current API session
      description: Retrieves the API session that was used to issue the current request
      operationId: getCurrentAPISession
      responses:
        "200":
          description: The API session associated with the session used to issue the
            request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/currentApiSessionDetailEnvelope'
            default:
              example:
                data:
                  _links:
                    self:
                      href: ./current-api-session
                  configTypes: []
                  createdAt: 2020-03-09T19:03:49.1883693Z
                  expiresAt: 2020-03-09T19:34:21.5600897Z
                  id: 27343114-b44f-406e-9981-f3c4f2f28d54
                  identity:
                    _links:
                      self:
                        href: ./identities/66352d7b-a6b2-4ce9-85bb-9f18e318704d
                    id: 66352d7b-a6b2-4ce9-85bb-9f18e318704d
                    name: Default Admin
                    urlName: identities
                  tags:
                  - userField1: 123
                  - userField2: asdf
                  token: 28bb0ed2-0577-4632-ae70-d17106b92871
                  updatedAt: 2020-03-09T19:04:21.5600897Z
                meta: {}
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
    delete:
      tags:
      - Current API Session
      summary: Logout
      description: Terminates the current API session
      responses:
        "200":
          description: Base empty response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty'
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
  /current-api-session/certificates:
    get:
      tags:
      - Current API Session
      summary: List the ephemeral certificates available for the current API Session
      description: "Retrieves a list of certificate resources for the current API\
        \ session; supports filtering, sorting, and pagination"
      operationId: listCurrentApiSessionCertificates
      parameters:
      - name: limit
        in: query
        schema:
          type: integer
      - name: offset
        in: query
        schema:
          type: integer
      - name: filter
        in: query
        schema:
          type: string
      responses:
        "200":
          description: A list of the current API Session's certificate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listCurrentApiSessionCertificatesEnvelope'
        "400":
          description: "The supplied request contains invalid fields or could not\
            \ be parsed (json and non-json bodies). The error's code, message, and\
            \ cause fields can be inspected for further information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause:
                    details:
                      context: (root)
                      field: (root)
                      property: fooField3
                    field: (root)
                    message: "(root): fooField3 is required"
                    type: required
                    value:
                      fooField: abc
                      fooField2: def
                  causeMessage: schema validation failed
                  code: COULD_NOT_VALIDATE
                  message: The supplied request contains an invalid document
                  requestId: ac6766d6-3a09-44b3-8d8a-1b541d97fdd9
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
    post:
      tags:
      - Current API Session
      summary: Creates an ephemeral certificate for the current API Session
      description: Creates an ephemeral certificate for the current API Session. This
        endpoint expects a PEM encoded CSRs to be provided for fulfillment as a property
        of a JSON payload. It is up to the client to manage the private key backing
        the CSR request.
      operationId: createCurrentApiSessionCertificate
      requestBody:
        description: The payload describing the CSR used to create a session certificate
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/currentApiSessionCertificateCreate'
        required: true
      responses:
        "201":
          description: A response of a create API Session certificate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createCurrentApiSessionCertificateEnvelope'
        "400":
          description: "The supplied request contains invalid fields or could not\
            \ be parsed (json and non-json bodies). The error's code, message, and\
            \ cause fields can be inspected for further information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause:
                    details:
                      context: (root)
                      field: (root)
                      property: fooField3
                    field: (root)
                    message: "(root): fooField3 is required"
                    type: required
                    value:
                      fooField: abc
                      fooField2: def
                  causeMessage: schema validation failed
                  code: COULD_NOT_VALIDATE
                  message: The supplied request contains an invalid document
                  requestId: ac6766d6-3a09-44b3-8d8a-1b541d97fdd9
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
      x-codegen-request-body-name: sessionCertificate
  /current-api-session/certificates/{id}:
    get:
      tags:
      - Current API Session
      summary: Retrieves an ephemeral certificate
      description: Retrieves a single ephemeral certificate by id
      operationId: detailCurrentApiSessionCertificate
      responses:
        "200":
          description: A response containing a single API Session certificate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/detailCurrentApiSessionCertificateEnvelope'
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "404":
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars:
                      id: 71a3000f-7dda-491a-9b90-a19f4ee6c406
                  causeMessage: ""
                  code: NOT_FOUND
                  message: The resource requested was not found or is no longer available
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
    delete:
      tags:
      - Current API Session
      summary: Delete an ephemeral certificate
      description: |
        Delete an ephemeral certificateby id
      operationId: deleteCurrentApiSessionCertificate
      responses:
        "200":
          description: The delete request was successful and the resource has been
            removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty'
        "400":
          description: "The supplied request contains invalid fields or could not\
            \ be parsed (json and non-json bodies). The error's code, message, and\
            \ cause fields can be inspected for further information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause:
                    details:
                      context: (root)
                      field: (root)
                      property: fooField3
                    field: (root)
                    message: "(root): fooField3 is required"
                    type: required
                    value:
                      fooField: abc
                      fooField2: def
                  causeMessage: schema validation failed
                  code: COULD_NOT_VALIDATE
                  message: The supplied request contains an invalid document
                  requestId: ac6766d6-3a09-44b3-8d8a-1b541d97fdd9
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
    parameters:
    - name: id
      in: path
      description: The id of the requested resource
      required: true
      schema:
        type: string
  /current-api-session/service-updates:
    get:
      tags:
      - Current API Session
      - Services
      summary: Returns data indicating whether a client should updates it service
        list
      description: |
        Retrieves data indicating the last time data relevant to this API Session was altered that would necessitate
        service refreshes.
      operationId: listServiceUpdates
      responses:
        "200":
          description: Data indicating necessary service updates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listCurrentApiSessionServiceUpdatesEnvelope'
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
  /current-identity:
    get:
      tags:
      - Current Identity
      summary: Return the current identity
      description: Returns the identity associated with the API sessions used to issue
        the current request
      operationId: getCurrentIdentity
      responses:
        "200":
          description: The identity associated with the API Session used to issue
            the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/currentIdentityDetailEnvelope'
            default:
              example:
                data:
                  _links:
                    edge-router-policies:
                      href: ./identities/66352d7b-a6b2-4ce9-85bb-9f18e318704d/edge-routers
                    self:
                      href: ./identities/66352d7b-a6b2-4ce9-85bb-9f18e318704d
                    service-policies:
                      href: ./identities/66352d7b-a6b2-4ce9-85bb-9f18e318704d/identities
                  authenticators:
                    updb:
                      username: admin
                  createdAt: 2020-01-13T16:38:13.6854788Z
                  enrollment: {}
                  id: 66352d7b-a6b2-4ce9-85bb-9f18e318704d
                  isAdmin: true
                  isDefaultAdmin: true
                  name: Default Admin
                  roleAttributes: []
                  tags: {}
                  type:
                    _links:
                      self:
                        href: ./identity-types/User
                    id: User
                    name: User
                    urlName: identity-types
                  updatedAt: 2020-01-13T16:38:13.6854788Z
                meta: {}
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
  /current-identity/authenticators:
    get:
      tags:
      - Current API Session
      summary: List authenticators for the current identity
      description: "Retrieves a list of authenticators assigned to the current API\
        \ session's identity; supports filtering, sorting, and pagination."
      operationId: listCurrentIdentityAuthenticators
      parameters:
      - name: limit
        in: query
        schema:
          type: integer
      - name: offset
        in: query
        schema:
          type: integer
      - name: filter
        in: query
        schema:
          type: string
      responses:
        "200":
          description: A list of authenticators
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listAuthenticatorsEnvelope'
        "400":
          description: "The supplied request contains invalid fields or could not\
            \ be parsed (json and non-json bodies). The error's code, message, and\
            \ cause fields can be inspected for further information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause:
                    details:
                      context: (root)
                      field: (root)
                      property: fooField3
                    field: (root)
                    message: "(root): fooField3 is required"
                    type: required
                    value:
                      fooField: abc
                      fooField2: def
                  causeMessage: schema validation failed
                  code: COULD_NOT_VALIDATE
                  message: The supplied request contains an invalid document
                  requestId: ac6766d6-3a09-44b3-8d8a-1b541d97fdd9
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
  /current-identity/authenticators/{id}:
    get:
      tags:
      - Current API Session
      summary: Retrieve an authenticator for the current identity
      description: Retrieves a single authenticator by id. Will only show authenticators
        assigned to the API session's identity.
      operationId: detailCurrentIdentityAuthenticator
      responses:
        "200":
          description: A singular authenticator resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/detailAuthenticatorEnvelope'
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "404":
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars:
                      id: 71a3000f-7dda-491a-9b90-a19f4ee6c406
                  causeMessage: ""
                  code: NOT_FOUND
                  message: The resource requested was not found or is no longer available
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
    put:
      tags:
      - Current API Session
      summary: Update all fields on an authenticator of this identity
      description: |
        Update all fields on an authenticator by id.  Will only update authenticators assigned to the API session's
        identity.
      operationId: updateCurrentIdentityAuthenticator
      requestBody:
        description: An authenticator put object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authenticatorUpdateWithCurrent'
        required: true
      responses:
        "200":
          description: The update request was successful and the resource has been
            altered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty'
        "400":
          description: "The supplied request contains invalid fields or could not\
            \ be parsed (json and non-json bodies). The error's code, message, and\
            \ cause fields can be inspected for further information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause:
                    details:
                      context: (root)
                      field: (root)
                      property: fooField3
                    field: (root)
                    message: "(root): fooField3 is required"
                    type: required
                    value:
                      fooField: abc
                      fooField2: def
                  causeMessage: schema validation failed
                  code: COULD_NOT_VALIDATE
                  message: The supplied request contains an invalid document
                  requestId: ac6766d6-3a09-44b3-8d8a-1b541d97fdd9
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "404":
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars:
                      id: 71a3000f-7dda-491a-9b90-a19f4ee6c406
                  causeMessage: ""
                  code: NOT_FOUND
                  message: The resource requested was not found or is no longer available
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
      x-codegen-request-body-name: authenticator
    patch:
      tags:
      - Current API Session
      summary: Update the supplied fields on an authenticator of this identity
      description: |
        Update the supplied fields on an authenticator by id. Will only update authenticators assigned to the API
        session's identity.
      operationId: patchCurrentIdentityAuthenticator
      requestBody:
        description: An authenticator patch object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authenticatorPatchWithCurrent'
        required: true
      responses:
        "200":
          description: The patch request was successful and the resource has been
            altered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty'
        "400":
          description: "The supplied request contains invalid fields or could not\
            \ be parsed (json and non-json bodies). The error's code, message, and\
            \ cause fields can be inspected for further information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause:
                    details:
                      context: (root)
                      field: (root)
                      property: fooField3
                    field: (root)
                    message: "(root): fooField3 is required"
                    type: required
                    value:
                      fooField: abc
                      fooField2: def
                  causeMessage: schema validation failed
                  code: COULD_NOT_VALIDATE
                  message: The supplied request contains an invalid document
                  requestId: ac6766d6-3a09-44b3-8d8a-1b541d97fdd9
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "404":
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars:
                      id: 71a3000f-7dda-491a-9b90-a19f4ee6c406
                  causeMessage: ""
                  code: NOT_FOUND
                  message: The resource requested was not found or is no longer available
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
      x-codegen-request-body-name: authenticator
    parameters:
    - name: id
      in: path
      description: The id of the requested resource
      required: true
      schema:
        type: string
  /current-identity/authenticators/{id}/extend:
    post:
      tags:
      - Current API Session
      - Enroll
      - Extend Enrollment
      summary: Allows the current identity to recieve a new certificate associated
        with a certificate based authenticator
      description: |-
        This endpoint only functions for certificates issued by the controller. 3rd party certificates are not handled.
        Allows an identity to extend its certificate's expiration date by using its current and valid client certificate to submit a CSR. This CSR may be passed in using a new private key, thus allowing private key rotation.
        The response from this endpoint is a new client certificate which the client must  be verified via the /authenticators/{id}/extend-verify endpoint.
        After verification is completion any new connections must be made with new certificate. Prior to verification the old client certificate remains active.
      operationId: extendCurrentIdentityAuthenticator
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/identityExtendEnrollmentRequest'
        required: true
      responses:
        "200":
          description: A response containg the identity's new certificate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/identityExtendEnrollmentEnvelope'
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
      x-codegen-request-body-name: extend
    parameters:
    - name: id
      in: path
      description: The id of the requested resource
      required: true
      schema:
        type: string
  /current-identity/authenticators/{id}/extend-verify:
    post:
      tags:
      - Current API Session
      - Enroll
      - Extend Enrollment
      summary: Allows the current identity to validate reciept of a new client certificate
      description: |-
        After submitting a CSR for a new client certificate the resulting public certificate must be re-submitted to this endpoint to verify receipt.
        After receipt, the new client certificate must be used for new authentication requests.
      operationId: extendVerifyCurrentIdentityAuthenticator
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/identityExtendValidateEnrollmentRequest'
        required: true
      responses:
        "200":
          description: Base empty response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty'
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
      x-codegen-request-body-name: extend
    parameters:
    - name: id
      in: path
      description: The id of the requested resource
      required: true
      schema:
        type: string
  /current-identity/edge-routers:
    get:
      tags:
      - Current Identity
      - Edge Router
      summary: Return this list of Edge Routers the identity has access to
      description: |
        Lists the Edge Routers that the current identity has access to via policies. The data returned
        includes their address and online status
      operationId: getCurrentIdentityEdgeRouters
      responses:
        "200":
          description: A list of edge routers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listCurrentIdentityEdgeRoutersEnvelope'
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
  /current-identity/mfa:
    get:
      tags:
      - Current Identity
      - MFA
      summary: Returns the current status of MFA enrollment
      description: |
        Returns details about the current MFA enrollment. If enrollment has not been completed it will return the current MFA configuration details necessary to complete a `POST /current-identity/mfa/verify`.
      operationId: detailMfa
      responses:
        "200":
          description: The details of an MFA enrollment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/detailMfaEnvelope'
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "404":
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars:
                      id: 71a3000f-7dda-491a-9b90-a19f4ee6c406
                  causeMessage: ""
                  code: NOT_FOUND
                  message: The resource requested was not found or is no longer available
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
    post:
      tags:
      - Current Identity
      - MFA
      summary: Initiate MFA enrollment
      description: |
        Allows authenticator based MFA enrollment. If enrollment has already been completed, it must be disabled before attempting to re-enroll. Subsequent enrollment request is completed via `POST /current-identity/mfa/verify`
      operationId: enrollMfa
      responses:
        "201":
          description: The create request was successful and the resource has been
            added at the following location
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createEnvelope'
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "409":
          description: The identity is already enrolled in MFA
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  causeMessage: ""
                  code: ALREADY_MFA_ENROLLED
                  message: The identity is already enrolled in MFA
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
    delete:
      tags:
      - Current Identity
      - MFA
      summary: Disable MFA for the current identity
      description: |
        Disable MFA for the current identity. Requires a current valid time based one time password if MFA enrollment has been completed. If not, code should be an empty string. If one time passwords are not available and admin account can be used to remove MFA from the identity via `DELETE /identities/<id>/mfa`.
      operationId: deleteMfa
      parameters:
      - name: mfa-validation-code
        in: header
        schema:
          type: string
      responses:
        "200":
          description: Base empty response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty'
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "404":
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars:
                      id: 71a3000f-7dda-491a-9b90-a19f4ee6c406
                  causeMessage: ""
                  code: NOT_FOUND
                  message: The resource requested was not found or is no longer available
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
  /current-identity/mfa/qr-code:
    get:
      tags:
      - Current Identity
      - MFA
      summary: Show a QR code for unverified MFA enrollments
      description: |
        Shows an QR code image for unverified MFA enrollments. 404s if the MFA enrollment has been completed or not started.
      operationId: detailMfaQrCode
      responses:
        "200":
          description: OK
          content: {}
        "404":
          description: No MFA enrollment or MFA enrollment is completed
          content: {}
      security:
      - ztSession: []
      - oauth2:
        - openid
  /current-identity/mfa/recovery-codes:
    get:
      tags:
      - Current Identity
      - MFA
      summary: For a completed MFA enrollment view the current recovery codes
      description: |
        Allows the viewing of recovery codes of an MFA enrollment. Requires a current valid time based one time password to interact with. Available after a completed MFA enrollment.
      operationId: detailMfaRecoveryCodes
      parameters:
      - name: mfa-validation-code
        in: header
        schema:
          type: string
      requestBody:
        description: An MFA validation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mfaCode'
        required: false
      responses:
        "200":
          description: The recovery codes of an MFA enrollment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/detailMfaRecoveryCodesEnvelope'
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "404":
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars:
                      id: 71a3000f-7dda-491a-9b90-a19f4ee6c406
                  causeMessage: ""
                  code: NOT_FOUND
                  message: The resource requested was not found or is no longer available
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
      x-codegen-request-body-name: mfaValidation
    post:
      tags:
      - Current Identity
      - MFA
      summary: For a completed MFA enrollment regenerate the recovery codes
      description: |
        Allows regeneration of recovery codes of an MFA enrollment. Requires a current valid time based one time password to interact with. Available after a completed MFA enrollment. This replaces all existing recovery codes.
      operationId: createMfaRecoveryCodes
      requestBody:
        description: An MFA validation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mfaCode'
        required: true
      responses:
        "200":
          description: Base empty response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty'
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "404":
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars:
                      id: 71a3000f-7dda-491a-9b90-a19f4ee6c406
                  causeMessage: ""
                  code: NOT_FOUND
                  message: The resource requested was not found or is no longer available
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
      x-codegen-request-body-name: mfaValidation
  /current-identity/mfa/verify:
    post:
      tags:
      - Current Identity
      - MFA
      summary: Complete MFA enrollment by verifying a time based one time token
      description: |
        Completes MFA enrollment by accepting a time based one time password as verification. Called after MFA enrollment has been initiated via `POST /current-identity/mfa`.
      operationId: verifyMfa
      requestBody:
        description: An MFA validation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mfaCode'
        required: true
      responses:
        "200":
          description: Base empty response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty'
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "404":
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars:
                      id: 71a3000f-7dda-491a-9b90-a19f4ee6c406
                  causeMessage: ""
                  code: NOT_FOUND
                  message: The resource requested was not found or is no longer available
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
      x-codegen-request-body-name: mfaValidation
  /enroll:
    post:
      tags:
      - Enroll
      summary: Enroll an identity via one-time-token
      description: present a OTT and CSR to receive a long-lived client certificate
      operationId: enroll
      responses:
        "200":
          description: A response for multi-format legacy enrollment.
          content:
            application/x-pem-file:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "404":
          description: The requested resource does not exist
          content:
            application/x-pem-file:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars:
                      id: 71a3000f-7dda-491a-9b90-a19f4ee6c406
                  causeMessage: ""
                  code: NOT_FOUND
                  message: The resource requested was not found or is no longer available
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/x-pem-file:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
    parameters:
    - name: token
      in: query
      schema:
        type: string
        format: uuid
    - name: method
      in: query
      schema:
        type: string
  /enroll/ca:
    post:
      tags:
      - Enroll
      summary: Enroll an identity with a pre-exchanged certificate
      description: |
        For CA auto enrollment, an identity is not created beforehand.
        Instead one will be created during enrollment. The client will present a client certificate that is signed by a
        Certificate Authority that has been added and verified (See POST /cas and POST /cas/{id}/verify).

        During this process no CSRs are requires as the client should already be in possession of a valid certificate.
      operationId: enrollCa
      responses:
        "200":
          description: Base empty response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty'
        "404":
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars:
                      id: 71a3000f-7dda-491a-9b90-a19f4ee6c406
                  causeMessage: ""
                  code: NOT_FOUND
                  message: The resource requested was not found or is no longer available
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
  /enroll/challenge:
    post:
      tags:
      - Enroll
      summary: Allows verification of a controller or cluster of controllers as being
        the valid target for enrollment.
      description: |
        A caller may submit a nonce and a key id (kid) from the enrollment JWKS endpoint or enrollment JWT that will
        be used to sign the nonce. The resulting signature may be validated with the associated public key in order
        to verify a networks identity during enrollment. The nonce must be a valid formatted UUID.
      operationId: enrollmentChallenge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nonceChallenge'
        required: true
      responses:
        "200":
          description: "A nonce challenge response. The contents will be the signature\
            \ of the nonce, the key id used, and algorithm used to produce the signature."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nonceSignature'
        "400":
          description: "The supplied request contains invalid fields or could not\
            \ be parsed (json and non-json bodies). The error's code, message, and\
            \ cause fields can be inspected for further information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause:
                    details:
                      context: (root)
                      field: (root)
                      property: fooField3
                    field: (root)
                    message: "(root): fooField3 is required"
                    type: required
                    value:
                      fooField: abc
                      fooField2: def
                  causeMessage: schema validation failed
                  code: COULD_NOT_VALIDATE
                  message: The supplied request contains an invalid document
                  requestId: ac6766d6-3a09-44b3-8d8a-1b541d97fdd9
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      x-codegen-request-body-name: nonce
  /enroll/erott:
    post:
      tags:
      - Enroll
      summary: Enroll an edge-router
      description: |
        Enrolls an edge-router via a one-time-token to establish a certificate based identity.
      operationId: enrollErOtt
      responses:
        "200":
          description: "A response containing the edge routers signed certificates\
            \ (server chain, server cert, CAs)."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/enrollmentCertsEnvelope'
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
    parameters:
    - name: erOttEnrollmentRequest
      in: body
      description: An OTT enrollment request
      required: true
  /enroll/extend/router:
    post:
      tags:
      - Enroll
      - Extend Enrollment
      summary: Extend the life of a currently enrolled router's certificates
      description: |
        Allows a router to extend its certificates' expiration date by
        using its current and valid client certificate to submit a CSR. This CSR may
        be passed in using a new private key, thus allowing private key rotation or swapping.

        After completion any new connections must be made with certificates returned from a 200 OK
        response. The previous client certificate is rendered invalid for use with the controller even if it
        has not expired.

        This request must be made using the existing, valid, client certificate.
      operationId: extendRouterEnrollment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/routerExtendEnrollmentRequest'
        required: true
      responses:
        "200":
          description: "A response containing the edge routers new signed certificates\
            \ (server chain, server cert, CAs)."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/enrollmentCertsEnvelope'
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      x-codegen-request-body-name: routerExtendEnrollmentRequest
  /enroll/jwks:
    get:
      tags:
      - Enroll
      summary: List JSON Web Keys associated with enrollment
      description: |
        Returns a list of JSON Web Keys (JWKS) that are used for enrollment signing. The keys listed here are used
        to sign and co-sign enrollment JWTs. They can be verified through a challenge endpoint, using the public keys
        from this endpoint to verify the target machine has possession of the related private key.
      operationId: getEnrollmentJwks
      responses:
        "200":
          description: A JWKS response for enrollment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jwks'
  /enroll/ott:
    post:
      tags:
      - Enroll
      summary: Enroll an identity via one-time-token
      description: |
        Enroll an identity via a one-time-token which is supplied via a query string parameter. This enrollment method
        expects a PEM encoded CSRs to be provided for fulfillment. It is up to the enrolling identity to manage the
        private key backing the CSR request.
      operationId: enrollOtt
      responses:
        "200":
          description: A response containing and identities client certificate chains
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/enrollmentCertsEnvelope'
        "404":
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars:
                      id: 71a3000f-7dda-491a-9b90-a19f4ee6c406
                  causeMessage: ""
                  code: NOT_FOUND
                  message: The resource requested was not found or is no longer available
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
    parameters:
    - name: ottEnrollmentRequest
      in: body
      description: An OTT enrollment request
      required: true
  /enroll/ottca:
    post:
      tags:
      - Enroll
      summary: Enroll an identity via one-time-token with a pre-exchanged client certificate
      description: |
        Enroll an identity via a one-time-token that also requires a pre-exchanged client certificate to match a
        Certificate Authority that has been added and verified (See POST /cas and POST /cas{id}/verify). The client
        must present a client certificate signed by CA associated with the enrollment. This enrollment is similar to
        CA auto enrollment except that is required the identity to be pre-created.

        As the client certificate has been pre-exchanged there is no CSR input to this enrollment method.
      operationId: enrollOttCa
      responses:
        "200":
          description: Base empty response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty'
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
    parameters:
    - name: ottEnrollmentRequest
      in: body
      description: An OTT enrollment request
      required: true
  /enroll/updb:
    post:
      tags:
      - Enroll
      summary: Enroll an identity via one-time-token
      description: |
        Enrolls an identity via a one-time-token to establish an initial username and password combination
      operationId: enrollUpdb
      responses:
        "200":
          description: Base empty response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty'
        "404":
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars:
                      id: 71a3000f-7dda-491a-9b90-a19f4ee6c406
                  causeMessage: ""
                  code: NOT_FOUND
                  message: The resource requested was not found or is no longer available
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
    parameters:
    - name: token
      in: query
      required: true
      schema:
        type: string
        format: uuid
    - name: updbCredentials
      in: body
      required: true
  /enumerated-capabilities:
    get:
      tags:
      - Informational
      summary: "Returns all capabilities this version of the controller is aware of,\
        \ enabled or not."
      operationId: listEnumeratedCapabilities
      responses:
        "200":
          description: A typed and enumerated list of capabilities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listEnumeratedCapabilitiesEnvelope'
      security: []
  /external-jwt-signers:
    get:
      tags:
      - External JWT Signer
      summary: List Client Authentication External JWT
      description: Retrieves a list of external JWT signers for authentication
      operationId: listExternalJwtSigners
      parameters:
      - name: limit
        in: query
        schema:
          type: integer
      - name: offset
        in: query
        schema:
          type: integer
      - name: filter
        in: query
        schema:
          type: string
      responses:
        "200":
          description: A list of External JWT Signers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listClientExternalJwtSignersEnvelope'
        "400":
          description: "The supplied request contains invalid fields or could not\
            \ be parsed (json and non-json bodies). The error's code, message, and\
            \ cause fields can be inspected for further information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause:
                    details:
                      context: (root)
                      field: (root)
                      property: fooField3
                    field: (root)
                    message: "(root): fooField3 is required"
                    type: required
                    value:
                      fooField: abc
                      fooField2: def
                  causeMessage: schema validation failed
                  code: COULD_NOT_VALIDATE
                  message: The supplied request contains an invalid document
                  requestId: ac6766d6-3a09-44b3-8d8a-1b541d97fdd9
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
  /posture-response:
    post:
      tags:
      - Posture Checks
      summary: Submit a posture response to a posture query
      description: Submits posture responses
      operationId: createPostureResponse
      requestBody:
        description: A Posture Response
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postureResponseCreate'
        required: true
      responses:
        "201":
          description: Contains a list of services that have had their timers altered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postureResponseEnvelope'
        "400":
          description: "The supplied request contains invalid fields or could not\
            \ be parsed (json and non-json bodies). The error's code, message, and\
            \ cause fields can be inspected for further information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause:
                    details:
                      context: (root)
                      field: (root)
                      property: fooField3
                    field: (root)
                    message: "(root): fooField3 is required"
                    type: required
                    value:
                      fooField: abc
                      fooField2: def
                  causeMessage: schema validation failed
                  code: COULD_NOT_VALIDATE
                  message: The supplied request contains an invalid document
                  requestId: ac6766d6-3a09-44b3-8d8a-1b541d97fdd9
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
      x-codegen-request-body-name: postureResponse
  /posture-response-bulk:
    post:
      tags:
      - Posture Checks
      summary: Submit multiple posture responses
      description: Submits posture responses
      operationId: createPostureResponseBulk
      requestBody:
        description: A Posture Response
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/postureResponseCreate'
        required: true
      responses:
        "200":
          description: Contains a list of services that have had their timers altered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postureResponseEnvelope'
        "400":
          description: "The supplied request contains invalid fields or could not\
            \ be parsed (json and non-json bodies). The error's code, message, and\
            \ cause fields can be inspected for further information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause:
                    details:
                      context: (root)
                      field: (root)
                      property: fooField3
                    field: (root)
                    message: "(root): fooField3 is required"
                    type: required
                    value:
                      fooField: abc
                      fooField2: def
                  causeMessage: schema validation failed
                  code: COULD_NOT_VALIDATE
                  message: The supplied request contains an invalid document
                  requestId: ac6766d6-3a09-44b3-8d8a-1b541d97fdd9
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
      x-codegen-request-body-name: postureResponse
  /protocols:
    get:
      tags:
      - Informational
      summary: Return a list of the listening Edge protocols
      operationId: listProtocols
      responses:
        "200":
          description: A list of supported Edge protocols
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listProtocolsEnvelope'
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security: []
  /services:
    get:
      tags:
      - Service
      summary: List services
      description: |
        Retrieves a list of config resources; supports filtering, sorting, and pagination. Requires admin access.
      operationId: listServices
      parameters:
      - name: limit
        in: query
        schema:
          type: integer
      - name: offset
        in: query
        schema:
          type: integer
      - name: filter
        in: query
        schema:
          type: string
      - name: configTypes
        in: query
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: roleFilter
        in: query
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: roleSemantic
        in: query
        schema:
          type: string
      responses:
        "200":
          description: A list of services
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listServicesEnvelope'
        "400":
          description: "The supplied request contains invalid fields or could not\
            \ be parsed (json and non-json bodies). The error's code, message, and\
            \ cause fields can be inspected for further information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause:
                    details:
                      context: (root)
                      field: (root)
                      property: fooField3
                    field: (root)
                    message: "(root): fooField3 is required"
                    type: required
                    value:
                      fooField: abc
                      fooField2: def
                  causeMessage: schema validation failed
                  code: COULD_NOT_VALIDATE
                  message: The supplied request contains an invalid document
                  requestId: ac6766d6-3a09-44b3-8d8a-1b541d97fdd9
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
  /services/{id}:
    get:
      tags:
      - Service
      summary: Retrieves a single service
      description: Retrieves a single service by id. Requires admin access.
      operationId: detailService
      responses:
        "200":
          description: A single service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/detailServiceEnvelope'
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "404":
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars:
                      id: 71a3000f-7dda-491a-9b90-a19f4ee6c406
                  causeMessage: ""
                  code: NOT_FOUND
                  message: The resource requested was not found or is no longer available
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
    put:
      tags:
      - Service
      summary: Update all fields on a service
      description: Update all fields on a service by id. Requires admin access.
      operationId: updateService
      requestBody:
        description: A service update object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serviceUpdate'
        required: true
      responses:
        "200":
          description: The update request was successful and the resource has been
            altered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty'
        "400":
          description: "The supplied request contains invalid fields or could not\
            \ be parsed (json and non-json bodies). The error's code, message, and\
            \ cause fields can be inspected for further information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause:
                    details:
                      context: (root)
                      field: (root)
                      property: fooField3
                    field: (root)
                    message: "(root): fooField3 is required"
                    type: required
                    value:
                      fooField: abc
                      fooField2: def
                  causeMessage: schema validation failed
                  code: COULD_NOT_VALIDATE
                  message: The supplied request contains an invalid document
                  requestId: ac6766d6-3a09-44b3-8d8a-1b541d97fdd9
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "404":
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars:
                      id: 71a3000f-7dda-491a-9b90-a19f4ee6c406
                  causeMessage: ""
                  code: NOT_FOUND
                  message: The resource requested was not found or is no longer available
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
      x-codegen-request-body-name: service
    delete:
      tags:
      - Service
      summary: Delete a service
      description: Delete a service by id. Requires admin access.
      operationId: deleteService
      responses:
        "200":
          description: The delete request was successful and the resource has been
            removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty'
        "400":
          description: "The supplied request contains invalid fields or could not\
            \ be parsed (json and non-json bodies). The error's code, message, and\
            \ cause fields can be inspected for further information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause:
                    details:
                      context: (root)
                      field: (root)
                      property: fooField3
                    field: (root)
                    message: "(root): fooField3 is required"
                    type: required
                    value:
                      fooField: abc
                      fooField2: def
                  causeMessage: schema validation failed
                  code: COULD_NOT_VALIDATE
                  message: The supplied request contains an invalid document
                  requestId: ac6766d6-3a09-44b3-8d8a-1b541d97fdd9
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "409":
          description: The resource requested to be removed/altered cannot be as it
            is referenced by another object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars:
                      id: 71a3000f-7dda-491a-9b90-a19f4ee6c406
                  causeMessage: referenced by /some-resource/05f4f710-c155-4a74-86d5-77558eb9cb42
                  code: CONFLICT_CANNOT_MODIFY_REFERENCED
                  message: The resource cannot be deleted/modified. Remove all referencing
                    resources first.
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
    patch:
      tags:
      - Service
      summary: Update the supplied fields on a service
      description: Update the supplied fields on a service. Requires admin access.
      operationId: patchService
      requestBody:
        description: A service patch object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicePatch'
        required: true
      responses:
        "200":
          description: The patch request was successful and the resource has been
            altered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty'
        "400":
          description: "The supplied request contains invalid fields or could not\
            \ be parsed (json and non-json bodies). The error's code, message, and\
            \ cause fields can be inspected for further information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause:
                    details:
                      context: (root)
                      field: (root)
                      property: fooField3
                    field: (root)
                    message: "(root): fooField3 is required"
                    type: required
                    value:
                      fooField: abc
                      fooField2: def
                  causeMessage: schema validation failed
                  code: COULD_NOT_VALIDATE
                  message: The supplied request contains an invalid document
                  requestId: ac6766d6-3a09-44b3-8d8a-1b541d97fdd9
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "404":
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars:
                      id: 71a3000f-7dda-491a-9b90-a19f4ee6c406
                  causeMessage: ""
                  code: NOT_FOUND
                  message: The resource requested was not found or is no longer available
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
      x-codegen-request-body-name: service
    parameters:
    - name: id
      in: path
      description: The id of the requested resource
      required: true
      schema:
        type: string
  /services/{id}/edge-routers:
    get:
      tags:
      - Service
      summary: List of edge routers permitted to handle traffic for the specified
        service
      description: |
        Retrieves the list of edge routers permitted to handle traffic for the specified service
      operationId: listServiceEdgeRouters
      parameters:
      - name: limit
        in: query
        schema:
          type: integer
      - name: offset
        in: query
        schema:
          type: integer
      - name: filter
        in: query
        schema:
          type: string
      - name: session-token
        in: header
        description: "an optional JWT token use to authenticate the request. If provided,\
          \ the token must be valid else a not authorized response is returned."
        schema:
          type: string
      responses:
        "200":
          description: A list of edge routers suitable for dialing or binding the
            specified service by the authenticated identity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listServiceEdgeRoutersEnvelope'
        "400":
          description: "The supplied request contains invalid fields or could not\
            \ be parsed (json and non-json bodies). The error's code, message, and\
            \ cause fields can be inspected for further information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause:
                    details:
                      context: (root)
                      field: (root)
                      property: fooField3
                    field: (root)
                    message: "(root): fooField3 is required"
                    type: required
                    value:
                      fooField: abc
                      fooField2: def
                  causeMessage: schema validation failed
                  code: COULD_NOT_VALIDATE
                  message: The supplied request contains an invalid document
                  requestId: ac6766d6-3a09-44b3-8d8a-1b541d97fdd9
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "404":
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars:
                      id: 71a3000f-7dda-491a-9b90-a19f4ee6c406
                  causeMessage: ""
                  code: NOT_FOUND
                  message: The resource requested was not found or is no longer available
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
    parameters:
    - name: id
      in: path
      description: The id of the requested resource
      required: true
      schema:
        type: string
  /services/{id}/terminators:
    get:
      tags:
      - Service
      summary: List of terminators assigned to a service
      description: |
        Retrieves a list of terminator resources that are assigned specific service; supports filtering, sorting, and pagination.
      operationId: listServiceTerminators
      parameters:
      - name: limit
        in: query
        schema:
          type: integer
      - name: offset
        in: query
        schema:
          type: integer
      - name: filter
        in: query
        schema:
          type: string
      responses:
        "200":
          description: A list of terminators
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listClientTerminatorsEnvelope'
        "400":
          description: "The supplied request contains invalid fields or could not\
            \ be parsed (json and non-json bodies). The error's code, message, and\
            \ cause fields can be inspected for further information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause:
                    details:
                      context: (root)
                      field: (root)
                      property: fooField3
                    field: (root)
                    message: "(root): fooField3 is required"
                    type: required
                    value:
                      fooField: abc
                      fooField2: def
                  causeMessage: schema validation failed
                  code: COULD_NOT_VALIDATE
                  message: The supplied request contains an invalid document
                  requestId: ac6766d6-3a09-44b3-8d8a-1b541d97fdd9
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
    parameters:
    - name: id
      in: path
      description: The id of the requested resource
      required: true
      schema:
        type: string
  /sessions:
    get:
      tags:
      - Session
      summary: List sessions
      description: |
        Retrieves a list of active sessions resources; supports filtering, sorting, and pagination.

        Sessions are tied to an API session and are moved when an API session times out or logs out. Active sessions
        (i.e. Ziti SDK connected to an edge router) will keep the session and API session marked as active.
      operationId: listSessions
      parameters:
      - name: limit
        in: query
        schema:
          type: integer
      - name: offset
        in: query
        schema:
          type: integer
      - name: filter
        in: query
        schema:
          type: string
      responses:
        "200":
          description: A list of sessions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listSessionsEnvelope'
        "400":
          description: "The supplied request contains invalid fields or could not\
            \ be parsed (json and non-json bodies). The error's code, message, and\
            \ cause fields can be inspected for further information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause:
                    details:
                      context: (root)
                      field: (root)
                      property: fooField3
                    field: (root)
                    message: "(root): fooField3 is required"
                    type: required
                    value:
                      fooField: abc
                      fooField2: def
                  causeMessage: schema validation failed
                  code: COULD_NOT_VALIDATE
                  message: The supplied request contains an invalid document
                  requestId: ac6766d6-3a09-44b3-8d8a-1b541d97fdd9
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
    post:
      tags:
      - Session
      summary: Create a session resource
      description: Create a session resource.
      operationId: createSession
      requestBody:
        description: A session to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sessionCreate'
        required: true
      responses:
        "201":
          description: The create request was successful and the resource has been
            added at the following location
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sessionCreateEnvelope'
        "400":
          description: "The supplied request contains invalid fields or could not\
            \ be parsed (json and non-json bodies). The error's code, message, and\
            \ cause fields can be inspected for further information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause:
                    details:
                      context: (root)
                      field: (root)
                      property: fooField3
                    field: (root)
                    message: "(root): fooField3 is required"
                    type: required
                    value:
                      fooField: abc
                      fooField2: def
                  causeMessage: schema validation failed
                  code: COULD_NOT_VALIDATE
                  message: The supplied request contains an invalid document
                  requestId: ac6766d6-3a09-44b3-8d8a-1b541d97fdd9
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "404":
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars:
                      id: 71a3000f-7dda-491a-9b90-a19f4ee6c406
                  causeMessage: ""
                  code: NOT_FOUND
                  message: The resource requested was not found or is no longer available
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
      x-codegen-request-body-name: session
  /sessions/{id}:
    get:
      tags:
      - Session
      summary: Retrieves a single session
      description: Retrieves a single session by id.
      operationId: detailSession
      responses:
        "200":
          description: A single session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/detailSessionEnvelope'
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "404":
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars:
                      id: 71a3000f-7dda-491a-9b90-a19f4ee6c406
                  causeMessage: ""
                  code: NOT_FOUND
                  message: The resource requested was not found or is no longer available
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
    delete:
      tags:
      - Session
      summary: Delete a session
      description: Delete a session by id.
      operationId: deleteSession
      responses:
        "200":
          description: The delete request was successful and the resource has been
            removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty'
        "400":
          description: "The supplied request contains invalid fields or could not\
            \ be parsed (json and non-json bodies). The error's code, message, and\
            \ cause fields can be inspected for further information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause:
                    details:
                      context: (root)
                      field: (root)
                      property: fooField3
                    field: (root)
                    message: "(root): fooField3 is required"
                    type: required
                    value:
                      fooField: abc
                      fooField2: def
                  causeMessage: schema validation failed
                  code: COULD_NOT_VALIDATE
                  message: The supplied request contains an invalid document
                  requestId: ac6766d6-3a09-44b3-8d8a-1b541d97fdd9
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "401":
          description: The supplied session does not have the correct access rights
            to request this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  cause: ""
                  causeMessage: ""
                  code: UNAUTHORIZED
                  message: The request could not be completed. The session is not
                    authorized or the credentials are invalid
                  requestId: 0bfe7a04-9229-4b7a-812c-9eb3cc0eac0f
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "409":
          description: The resource requested to be removed/altered cannot be as it
            is referenced by another object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars:
                      id: 71a3000f-7dda-491a-9b90-a19f4ee6c406
                  causeMessage: referenced by /some-resource/05f4f710-c155-4a74-86d5-77558eb9cb42
                  code: CONFLICT_CANNOT_MODIFY_REFERENCED
                  message: The resource cannot be deleted/modified. Remove all referencing
                    resources first.
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
        "429":
          description: The resource requested is rate limited and the rate limit has
            been exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorEnvelope'
              example:
                error:
                  args:
                    urlVars: {}
                  causeMessage: you have hit a rate limit in the requested operation
                  code: RATE_LIMITED
                  message: The resource is rate limited and the rate limit has been
                    exceeded. Please try again later
                  requestId: 270908d6-f2ef-4577-b973-67bec18ae376
                meta:
                  apiEnrollmentVersion: 0.0.1
                  apiVersion: 0.0.1
      security:
      - ztSession: []
      - oauth2:
        - openid
    parameters:
    - name: id
      in: path
      description: The id of the requested resource
      required: true
      schema:
        type: string
  /specs:
    get:
      tags:
      - Informational
      summary: Returns a list of API specs
      description: Returns a list of spec files embedded within the controller for
        consumption/documentation/code geneartion
      operationId: listSpecs
      responses:
        "200":
          description: A list of specifications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listSpecsEnvelope'
      security: []
  /specs/{id}:
    get:
      tags:
      - Informational
      summary: Return a single spec resource
      description: Returns single spec resource embedded within the controller for
        consumption/documentation/code geneartion
      operationId: detailSpec
      responses:
        "200":
          description: A single specification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/detailSpecEnvelope'
      security: []
    parameters:
    - name: id
      in: path
      description: The id of the requested resource
      required: true
      schema:
        type: string
  /specs/{id}/spec:
    get:
      tags:
      - Informational
      summary: Returns the spec's file
      description: "Return the body of the specification (i.e. Swagger, OpenAPI 2.0,\
        \ 3.0, etc)."
      operationId: detailSpecBody
      responses:
        "200":
          description: Returns the document that represents the specification
          content:
            text/yaml:
              schema:
                $ref: '#/components/schemas/detailSpecBodyEnvelope'
            application/json:
              schema:
                $ref: '#/components/schemas/detailSpecBodyEnvelope'
      security: []
    parameters:
    - name: id
      in: path
      description: The id of the requested resource
      required: true
      schema:
        type: string
  /version:
    get:
      tags:
      - Informational
      summary: Returns version information
      operationId: listVersion
      responses:
        "200":
          description: Version information for the controller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listVersionEnvelope'
      security: []
components:
  schemas:
    apiAddress:
      type: object
      properties:
        url:
          type: string
        version:
          type: string
    apiAddressArray:
      type: array
      items:
        $ref: '#/components/schemas/apiAddress'
    apiAddressList:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/apiAddressArray'
    apiError:
      type: object
      properties:
        args:
          $ref: '#/components/schemas/apiErrorArgs'
        cause:
          $ref: '#/components/schemas/apiErrorCause'
        causeMessage:
          type: string
        code:
          type: string
        data:
          type: object
          additionalProperties: true
        message:
          type: string
        requestId:
          type: string
    apiErrorArgs:
      type: object
      properties:
        urlVars:
          type: object
          additionalProperties:
            type: string
    apiErrorCause:
      allOf:
      - $ref: '#/components/schemas/apiFieldError'
      - $ref: '#/components/schemas/apiError'
    apiErrorEnvelope:
      required:
      - error
      - meta
      type: object
      properties:
        error:
          $ref: '#/components/schemas/apiError'
        meta:
          $ref: '#/components/schemas/meta'
    apiFieldError:
      type: object
      properties:
        field:
          type: string
        reason:
          type: string
        value:
          type: object
          description: "can be any value - string, number, boolean, array or object"
    apiSessionDetail:
      description: An API Session object
      allOf:
      - $ref: '#/components/schemas/baseEntity'
      - required:
        - authQueries
        - authenticatorId
        - configTypes
        - identity
        - identityId
        - ipAddress
        - isCertExtendable
        - isMfaComplete
        - isMfaRequired
        - token
        type: object
        properties:
          authQueries:
            $ref: '#/components/schemas/authQueryList'
          authenticatorId:
            type: string
          cachedLastActivityAt:
            type: string
            format: date-time
          configTypes:
            type: array
            items:
              type: string
          identity:
            $ref: '#/components/schemas/entityRef'
          identityId:
            type: string
          ipAddress:
            type: string
          isCertExtendable:
            type: boolean
          isMfaComplete:
            type: boolean
          isMfaRequired:
            type: boolean
          lastActivityAt:
            type: string
            format: date-time
          token:
            type: string
    apiVersion:
      required:
      - path
      type: object
      properties:
        apiBaseUrls:
          type: array
          items:
            type: string
        path:
          type: string
        version:
          type: string
    attributes:
      type: array
      description: A set of strings used to loosly couple this resource to policies
      nullable: true
      items:
        type: string
      x-nullable: true
      x-omitempty: true
    authQueryDetail:
      required:
      - provider
      type: object
      properties:
        format:
          $ref: '#/components/schemas/mfaFormats'
        httpMethod:
          type: string
        httpUrl:
          type: string
        maxLength:
          type: integer
        minLength:
          type: integer
        provider:
          $ref: '#/components/schemas/mfaProviders'
        typeId:
          type: string
    authQueryList:
      type: array
      items:
        $ref: '#/components/schemas/authQueryDetail'
    authenticate:
      type: object
      properties:
        configTypes:
          $ref: '#/components/schemas/configTypes'
        envInfo:
          $ref: '#/components/schemas/envInfo'
        password:
          $ref: '#/components/schemas/password'
        sdkInfo:
          $ref: '#/components/schemas/sdkInfo'
        username:
          $ref: '#/components/schemas/username'
      description: A generic authenticate object meant for use with the /authenticate
        path. Required fields depend on authentication method.
    authenticatorDetail:
      description: A singular authenticator resource
      allOf:
      - $ref: '#/components/schemas/baseEntity'
      - required:
        - identity
        - identityId
        - method
        type: object
        properties:
          certPem:
            type: string
          fingerprint:
            type: string
          identity:
            $ref: '#/components/schemas/entityRef'
          identityId:
            type: string
          isIssuedByNetwork:
            type: boolean
          method:
            type: string
          username:
            type: string
    authenticatorList:
      type: array
      description: An array of authenticator resources
      items:
        $ref: '#/components/schemas/authenticatorDetail'
    authenticatorPatch:
      type: object
      properties:
        password:
          $ref: '#/components/schemas/passwordNullable'
        tags:
          $ref: '#/components/schemas/tags'
        username:
          $ref: '#/components/schemas/usernameNullable'
      description: All of the fields on an authenticator that may be updated
    authenticatorPatchWithCurrent:
      description: All of the fields on an authenticator that may be updated
      allOf:
      - $ref: '#/components/schemas/authenticatorPatch'
      - required:
        - currentPassword
        type: object
        properties:
          currentPassword:
            $ref: '#/components/schemas/password'
    authenticatorUpdate:
      required:
      - password
      - username
      type: object
      properties:
        password:
          $ref: '#/components/schemas/password'
        tags:
          $ref: '#/components/schemas/tags'
        username:
          $ref: '#/components/schemas/username'
      description: All of the fields on an authenticator that will be updated
    authenticatorUpdateWithCurrent:
      description: All of the fields on an authenticator that will be updated
      allOf:
      - $ref: '#/components/schemas/authenticatorUpdate'
      - required:
        - currentPassword
        type: object
        properties:
          currentPassword:
            $ref: '#/components/schemas/password'
    baseEntity:
      required:
      - _links
      - createdAt
      - id
      - updatedAt
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/links'
        createdAt:
          type: string
          format: date-time
        id:
          type: string
        tags:
          $ref: '#/components/schemas/tags'
        updatedAt:
          type: string
          format: date-time
      description: Fields shared by all Edge API entities
    capabilities:
      type: string
      enum:
      - OIDC_AUTH
      - HA_CONTROLLER
    clientExternalJwtSignerDetail:
      description: A External JWT Signer resource
      allOf:
      - $ref: '#/components/schemas/baseEntity'
      - required:
        - externalAuthUrl
        - name
        type: object
        properties:
          clientId:
            type: string
            nullable: true
          externalAuthUrl:
            type: string
            format: url
          name:
            type: string
            example: MyApps Signer
          scopes:
            type: array
            items:
              type: string
    clientExternalJwtSignerList:
      type: array
      description: An array of External JWT Signers resources
      items:
        $ref: '#/components/schemas/clientExternalJwtSignerDetail'
    commonEdgeRouterProperties:
      required:
      - cost
      - disabled
      - hostname
      - isOnline
      - name
      - noTraversal
      - supportedProtocols
      - syncStatus
      type: object
      properties:
        appData:
          $ref: '#/components/schemas/tags'
        cost:
          maximum: 65535
          minimum: 0
          type: integer
          nullable: true
        disabled:
          type: boolean
        hostname:
          type: string
        isOnline:
          type: boolean
        name:
          type: string
        noTraversal:
          type: boolean
          nullable: true
        supportedProtocols:
          type: object
          additionalProperties:
            type: string
        syncStatus:
          type: string
    configTypes:
      type: array
      description: Specific configuration types that should be returned
      items:
        type: string
    controllerDetail:
      description: A controller resource
      allOf:
      - $ref: '#/components/schemas/baseEntity'
      - required:
        - certPem
        - fingerprint
        - isOnline
        - lastJoinedAt
        - name
        type: object
        properties:
          apiAddresses:
            $ref: '#/components/schemas/apiAddressList'
          certPem:
            type: string
          ctrlAddress:
            type: string
            nullable: true
          fingerprint:
            type: string
          isOnline:
            type: boolean
          lastJoinedAt:
            type: string
            format: date-time
          name:
            type: string
    controllersList:
      type: array
      description: An array of controller resources
      items:
        $ref: '#/components/schemas/controllerDetail'
    createCurrentApiSessionCertificateEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          $ref: '#/components/schemas/currentApiSessionCertificateCreateResponse'
        meta:
          $ref: '#/components/schemas/meta'
    createEnvelope:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/createLocation'
        meta:
          $ref: '#/components/schemas/meta'
    createLocation:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/links'
        id:
          type: string
    currentApiSessionCertificateCreate:
      required:
      - csr
      type: object
      properties:
        csr:
          type: string
    currentApiSessionCertificateCreateResponse:
      allOf:
      - $ref: '#/components/schemas/createLocation'
      - required:
        - certificate
        type: object
        properties:
          cas:
            type: string
          certificate:
            type: string
    currentApiSessionCertificateDetail:
      allOf:
      - $ref: '#/components/schemas/baseEntity'
      - required:
        - certificate
        - fingerprint
        - subject
        - validFrom
        - validTo
        type: object
        properties:
          certificate:
            type: string
          fingerprint:
            type: string
          subject:
            type: string
          validFrom:
            type: string
            format: date-time
          validTo:
            type: string
            format: date-time
    currentApiSessionCertificateList:
      type: array
      items:
        $ref: '#/components/schemas/currentApiSessionCertificateDetail'
    currentApiSessionDetail:
      description: An API Session object for the current API session
      allOf:
      - $ref: '#/components/schemas/apiSessionDetail'
      - required:
        - expirationSeconds
        - expiresAt
        type: object
        properties:
          expirationSeconds:
            type: integer
          expiresAt:
            type: string
            format: date-time
    currentApiSessionDetailEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          $ref: '#/components/schemas/currentApiSessionDetail'
        meta:
          $ref: '#/components/schemas/meta'
    currentApiSessionServiceUpdateList:
      required:
      - lastChangeAt
      type: object
      properties:
        lastChangeAt:
          type: string
          format: date-time
    currentIdentityDetailEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          $ref: '#/components/schemas/identityDetail'
        meta:
          $ref: '#/components/schemas/meta'
    currentIdentityEdgeRouterDetail:
      description: A detail edge router resource
      allOf:
      - $ref: '#/components/schemas/baseEntity'
      - $ref: '#/components/schemas/commonEdgeRouterProperties'
    currentIdentityEdgeRouterList:
      type: array
      description: A list of edge router resources
      items:
        $ref: '#/components/schemas/currentIdentityEdgeRouterDetail'
    detailAuthenticatorEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          $ref: '#/components/schemas/authenticatorDetail'
        meta:
          $ref: '#/components/schemas/meta'
    detailCurrentApiSessionCertificateEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          $ref: '#/components/schemas/currentApiSessionCertificateDetail'
        meta:
          $ref: '#/components/schemas/meta'
    detailMfa:
      allOf:
      - $ref: '#/components/schemas/baseEntity'
      - required:
        - isVerified
        type: object
        properties:
          isVerified:
            type: boolean
          provisioningUrl:
            type: string
            description: Not provided if MFA verification has been completed
          recoveryCodes:
            type: array
            description: Not provided if MFA verification has been completed
            items:
              type: string
    detailMfaEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          $ref: '#/components/schemas/detailMfa'
        meta:
          $ref: '#/components/schemas/meta'
    detailMfaRecoveryCodes:
      allOf:
      - $ref: '#/components/schemas/baseEntity'
      - required:
        - recoveryCodes
        type: object
        properties:
          recoveryCodes:
            type: array
            items:
              type: string
    detailMfaRecoveryCodesEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          $ref: '#/components/schemas/detailMfaRecoveryCodes'
        meta:
          $ref: '#/components/schemas/meta'
    detailServiceEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          $ref: '#/components/schemas/serviceDetail'
        meta:
          $ref: '#/components/schemas/meta'
    detailSessionEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          $ref: '#/components/schemas/sessionDetail'
        meta:
          $ref: '#/components/schemas/meta'
    detailSpecBodyEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          $ref: '#/components/schemas/specBodyDetail'
        meta:
          $ref: '#/components/schemas/meta'
    detailSpecEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          $ref: '#/components/schemas/specDetail'
        meta:
          $ref: '#/components/schemas/meta'
    dialBind:
      type: string
      enum:
      - Dial
      - Bind
      - Invalid
    dialBindArray:
      type: array
      items:
        $ref: '#/components/schemas/dialBind'
    empty:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: object
          properties: {}
          example: {}
        meta:
          $ref: '#/components/schemas/meta'
    enrollmentCerts:
      type: object
      properties:
        ca:
          type: string
          description: A PEM encoded set of CA certificates to trust
        cert:
          type: string
          description: A PEM encoded set of certificates to use as the client chain
        serverCert:
          type: string
          description: A PEM encoded set of certificates to use as the servers chain
    enrollmentCertsEnvelope:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/enrollmentCerts'
        meta:
          $ref: '#/components/schemas/meta'
    entityRef:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/links'
        entity:
          type: string
        id:
          type: string
        name:
          type: string
      description: A reference to another resource and links to interact with it
    envInfo:
      type: object
      properties:
        arch:
          maxLength: 255
          type: string
        domain:
          maxLength: 253
          type: string
        hostname:
          maxLength: 253
          type: string
        os:
          maxLength: 255
          type: string
        osRelease:
          maxLength: 255
          type: string
        osVersion:
          maxLength: 255
          type: string
      description: Environment information an authenticating client may provide
    erOttEnrollmentRequest:
      type: object
      properties:
        clientCsr:
          type: string
        serverCsr:
          type: string
        token:
          type: string
    identityAuthenticators:
      type: object
      properties:
        cert:
          type: object
          properties:
            fingerprint:
              type: string
            id:
              type: string
        updb:
          type: object
          properties:
            id:
              type: string
            username:
              type: string
    identityDetail:
      description: Detail of a specific identity
      allOf:
      - $ref: '#/components/schemas/baseEntity'
      - required:
        - authPolicy
        - authPolicyId
        - authenticators
        - defaultHostingCost
        - disabled
        - enrollment
        - envInfo
        - externalId
        - hasApiSession
        - hasEdgeRouterConnection
        - isAdmin
        - isDefaultAdmin
        - isMfaEnabled
        - name
        - roleAttributes
        - sdkInfo
        - serviceHostingCosts
        - serviceHostingPrecedences
        - type
        - typeId
        type: object
        properties:
          appData:
            $ref: '#/components/schemas/tags'
          authPolicy:
            $ref: '#/components/schemas/entityRef'
          authPolicyId:
            type: string
          authenticators:
            $ref: '#/components/schemas/identityAuthenticators'
          defaultHostingCost:
            $ref: '#/components/schemas/terminatorCost'
          defaultHostingPrecedence:
            $ref: '#/components/schemas/terminatorPrecedence'
          disabled:
            type: boolean
          disabledAt:
            type: string
            format: date-time
            nullable: true
          disabledUntil:
            type: string
            format: date-time
            nullable: true
          enrollment:
            $ref: '#/components/schemas/identityEnrollments'
          envInfo:
            $ref: '#/components/schemas/envInfo'
          externalId:
            type: string
            nullable: true
          hasApiSession:
            type: boolean
          hasEdgeRouterConnection:
            type: boolean
          isAdmin:
            type: boolean
          isDefaultAdmin:
            type: boolean
          isMfaEnabled:
            type: boolean
          name:
            type: string
          roleAttributes:
            $ref: '#/components/schemas/attributes'
          sdkInfo:
            $ref: '#/components/schemas/sdkInfo'
          serviceHostingCosts:
            $ref: '#/components/schemas/terminatorCostMap'
          serviceHostingPrecedences:
            $ref: '#/components/schemas/terminatorPrecedenceMap'
          type:
            $ref: '#/components/schemas/entityRef'
          typeId:
            type: string
    identityEnrollments:
      type: object
      properties:
        ott:
          type: object
          properties:
            expiresAt:
              type: string
              format: date-time
            id:
              type: string
            jwt:
              type: string
            token:
              type: string
        ottca:
          type: object
          properties:
            ca:
              $ref: '#/components/schemas/entityRef'
            caId:
              type: string
            expiresAt:
              type: string
              format: date-time
            id:
              type: string
            jwt:
              type: string
            token:
              type: string
        updb:
          type: object
          properties:
            expiresAt:
              type: string
              format: date-time
            id:
              type: string
            jwt:
              type: string
            token:
              type: string
    identityExtendCerts:
      type: object
      properties:
        ca:
          type: string
          description: A PEM encoded set of CA certificates
        clientCert:
          type: string
          description: A PEM encoded client certificate
    identityExtendEnrollmentEnvelope:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/identityExtendCerts'
        meta:
          $ref: '#/components/schemas/meta'
    identityExtendEnrollmentRequest:
      required:
      - clientCertCsr
      type: object
      properties:
        clientCertCsr:
          type: string
    identityExtendValidateEnrollmentRequest:
      required:
      - clientCert
      type: object
      properties:
        clientCert:
          type: string
          description: A PEM encoded client certificate previously returned after
            an extension request
    jwk:
      required:
      - kty
      type: object
      properties:
        alg:
          type: string
          description: Algorithm intended for use with the key.
        crv:
          type: string
          description: Curve for ECC Public Keys.
        d:
          type: string
          description: ECC Private Key or RSA Private Exponent.
        dp:
          type: string
          description: First Factor CRT Exponent for RSA.
        dq:
          type: string
          description: Second Factor CRT Exponent for RSA.
        e:
          type: string
          description: Exponent for RSA Public Key.
        key_ops:
          type: array
          description: "Intended key operations, e.g., sign, verify."
          items:
            type: string
        kid:
          type: string
          description: Key ID.
        kty:
          type: string
          description: Key Type.
        "n":
          type: string
          description: Modulus for RSA Public Key.
        oth:
          type: array
          description: Other Primes Info not represented by the first two primes.
          items:
            $ref: '#/components/schemas/otherPrime'
        p:
          type: string
          description: First Prime Factor for RSA.
        q:
          type: string
          description: Second Prime Factor for RSA.
        qi:
          type: string
          description: First CRT Coefficient for RSA.
        use:
          type: string
          description: "Public key use, e.g., sig (signature) or enc (encryption)."
        x:
          type: string
          description: X Coordinate for ECC Public Keys.
        x5c:
          type: array
          description: X.509 Certificate Chain.
          items:
            type: string
        x5t:
          type: string
          description: X.509 Certificate SHA-1 Thumbprint.
        x5t#S256:
          type: string
          description: X.509 Certificate SHA-256 Thumbprint.
        x5u:
          type: string
          description: X.509 URL.
        "y":
          type: string
          description: Y Coordinate for ECC Public Keys.
    jwks:
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/jwk'
    link:
      required:
      - href
      type: object
      properties:
        comment:
          type: string
        href:
          type: string
          format: uri
        method:
          type: string
      description: A link to another resource
    links:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/link'
      description: A map of named links
      x-omitempty: false
    listAuthenticatorsEnvelope:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/authenticatorList'
        meta:
          $ref: '#/components/schemas/meta'
    listClientExternalJwtSignersEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          $ref: '#/components/schemas/clientExternalJwtSignerList'
        meta:
          $ref: '#/components/schemas/meta'
    listClientTerminatorsEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          $ref: '#/components/schemas/terminatorClientList'
        meta:
          $ref: '#/components/schemas/meta'
    listControllersEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          $ref: '#/components/schemas/controllersList'
        meta:
          $ref: '#/components/schemas/meta'
    listCurrentApiSessionCertificatesEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          $ref: '#/components/schemas/currentApiSessionCertificateList'
        meta:
          $ref: '#/components/schemas/meta'
    listCurrentApiSessionServiceUpdatesEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          $ref: '#/components/schemas/currentApiSessionServiceUpdateList'
        meta:
          $ref: '#/components/schemas/meta'
    listCurrentIdentityEdgeRoutersEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          $ref: '#/components/schemas/currentIdentityEdgeRouterList'
        meta:
          $ref: '#/components/schemas/meta'
    listEnumeratedCapabilitiesEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/capabilities'
        meta:
          $ref: '#/components/schemas/meta'
    listProtocols:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/protocol'
    listProtocolsEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          $ref: '#/components/schemas/listProtocols'
        meta:
          $ref: '#/components/schemas/meta'
    listServiceEdgeRoutersEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          $ref: '#/components/schemas/serviceEdgeRouters'
        meta:
          $ref: '#/components/schemas/meta'
    listServicesEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          $ref: '#/components/schemas/serviceList'
        meta:
          $ref: '#/components/schemas/meta'
    listSessionsEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          $ref: '#/components/schemas/sessionList'
        meta:
          $ref: '#/components/schemas/meta'
    listSpecsEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          $ref: '#/components/schemas/specList'
        meta:
          $ref: '#/components/schemas/meta'
    listVersionEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          $ref: '#/components/schemas/version'
        meta:
          $ref: '#/components/schemas/meta'
    meta:
      type: object
      properties:
        apiEnrollmentVersion:
          type: string
        apiVersion:
          type: string
        filterableFields:
          type: array
          items:
            type: string
          x-omitempty: true
        pagination:
          $ref: '#/components/schemas/pagination'
    mfaCode:
      required:
      - code
      type: object
      properties:
        code:
          type: string
    mfaFormats:
      type: string
      enum:
      - numeric
      - alpha
      - alphaNumeric
    mfaProviders:
      type: string
      enum:
      - ziti
      - url
    nonceChallenge:
      required:
      - keyId
      - nonce
      type: object
      properties:
        keyId:
          type: string
        nonce:
          type: string
          format: uuid
    nonceSignature:
      required:
      - algorithm
      - caPool
      - kid
      - signature
      type: object
      properties:
        algorithm:
          type: string
        caPool:
          type: string
        kid:
          type: string
        signature:
          type: string
    osType:
      type: string
      enum:
      - Windows
      - WindowsServer
      - Android
      - iOS
      - Linux
      - macOS
    otherPrime:
      type: object
      properties:
        d:
          type: string
          description: Factor CRT exponent.
        r:
          type: string
          description: Prime factor.
        t:
          type: string
          description: Factor CRT coefficient.
    ottEnrollmentRequest:
      type: object
      properties:
        clientCsr:
          type: string
        token:
          type: string
    pagination:
      required:
      - limit
      - offset
      - totalCount
      type: object
      properties:
        limit:
          type: number
          format: int64
        offset:
          type: number
          format: int64
        totalCount:
          type: number
          format: int64
    password:
      maxLength: 100
      minLength: 5
      type: string
    passwordNullable:
      maxLength: 100
      minLength: 5
      type: string
      nullable: true
      x-nullable: true
    postureCheckType:
      type: string
      enum:
      - OS
      - PROCESS
      - DOMAIN
      - MAC
      - MFA
      - PROCESS_MULTI
    postureQueries:
      required:
      - isPassing
      - policyId
      - postureQueries
      type: object
      properties:
        isPassing:
          type: boolean
        policyId:
          type: string
        policyType:
          $ref: '#/components/schemas/dialBind'
        postureQueries:
          type: array
          items:
            $ref: '#/components/schemas/postureQuery'
    postureQuery:
      allOf:
      - $ref: '#/components/schemas/baseEntity'
      - required:
        - isPassing
        - queryType
        - timeout
        - timeoutRemaining
        type: object
        properties:
          isPassing:
            type: boolean
          process:
            $ref: '#/components/schemas/postureQueryProcess'
          processes:
            type: array
            items:
              $ref: '#/components/schemas/postureQueryProcess'
          queryType:
            $ref: '#/components/schemas/postureCheckType'
          timeout:
            type: integer
          timeoutRemaining:
            type: integer
    postureQueryProcess:
      type: object
      properties:
        osType:
          $ref: '#/components/schemas/osType'
        path:
          type: string
    postureResponse:
      required:
      - services
      type: object
      properties:
        services:
          type: array
          items:
            $ref: '#/components/schemas/postureResponseService'
    postureResponseCreate:
      required:
      - id
      - typeId
      type: object
      properties:
        id:
          type: string
        typeId:
          $ref: '#/components/schemas/postureCheckType'
      discriminator:
        propertyName: typeId
    postureResponseDomainCreate:
      allOf:
      - $ref: '#/components/schemas/postureResponseCreate'
      - required:
        - domain
        type: object
        properties:
          domain:
            type: string
      x-class: DOMAIN
    postureResponseEndpointStateCreate:
      allOf:
      - $ref: '#/components/schemas/postureResponseCreate'
      - type: object
        properties:
          unlocked:
            type: boolean
          woken:
            type: boolean
      x-class: ENDPOINT_STATE
    postureResponseEnvelope:
      required:
      - data
      - meta
      type: object
      properties:
        data:
          $ref: '#/components/schemas/postureResponse'
        meta:
          $ref: '#/components/schemas/meta'
    postureResponseMacAddressCreate:
      allOf:
      - $ref: '#/components/schemas/postureResponseCreate'
      - required:
        - macAddresses
        type: object
        properties:
          macAddresses:
            type: array
            items:
              type: string
      x-class: MAC
    postureResponseOperatingSystemCreate:
      allOf:
      - $ref: '#/components/schemas/postureResponseCreate'
      - required:
        - type
        - version
        type: object
        properties:
          build:
            type: string
          type:
            type: string
          version:
            type: string
      x-class: OS
    postureResponseProcessCreate:
      allOf:
      - $ref: '#/components/schemas/postureResponseCreate'
      - type: object
        properties:
          hash:
            type: string
          isRunning:
            type: boolean
          path:
            type: string
          signerFingerprints:
            type: array
            items:
              type: string
      x-class: PROCESS
    postureResponseService:
      required:
      - id
      - name
      - postureQueryType
      - timeout
      - timeoutRemaining
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        postureQueryType:
          type: string
        timeout:
          type: integer
        timeoutRemaining:
          type: integer
    protocol:
      required:
      - address
      type: object
      properties:
        address:
          type: string
    routerExtendEnrollmentRequest:
      required:
      - certCsr
      - serverCertCsr
      type: object
      properties:
        certCsr:
          type: string
        serverCertCsr:
          type: string
    sdkInfo:
      type: object
      properties:
        appId:
          maxLength: 255
          type: string
        appVersion:
          maxLength: 255
          type: string
        branch:
          maxLength: 255
          type: string
        revision:
          maxLength: 255
          type: string
        type:
          maxLength: 255
          type: string
        version:
          maxLength: 255
          type: string
      description: SDK information an authenticating client may provide
    serviceDetail:
      allOf:
      - $ref: '#/components/schemas/baseEntity'
      - required:
        - config
        - configs
        - encryptionRequired
        - maxIdleTimeMillis
        - name
        - permissions
        - postureQueries
        - roleAttributes
        - terminatorStrategy
        type: object
        properties:
          config:
            type: object
            additionalProperties:
              type: object
              additionalProperties:
                type: object
                properties: {}
            description: map of config data for this service keyed by the config type
              name. Only configs of the types requested will be returned.
          configs:
            type: array
            items:
              type: string
          encryptionRequired:
            type: boolean
            description: "Describes whether connections must support end-to-end encryption\
              \ on both sides of the connection. Read-only property, set at create."
          maxIdleTimeMillis:
            type: integer
          name:
            type: string
          permissions:
            $ref: '#/components/schemas/dialBindArray'
          postureQueries:
            type: array
            items:
              $ref: '#/components/schemas/postureQueries'
          roleAttributes:
            $ref: '#/components/schemas/attributes'
          terminatorStrategy:
            type: string
    serviceEdgeRouters:
      type: object
      properties:
        edgeRouters:
          type: array
          items:
            $ref: '#/components/schemas/commonEdgeRouterProperties'
    serviceList:
      type: array
      items:
        $ref: '#/components/schemas/serviceDetail'
    servicePatch:
      type: object
      properties:
        configs:
          type: array
          items:
            type: string
        encryptionRequired:
          type: boolean
          description: "Describes whether connections must support end-to-end encryption\
            \ on both sides of the connection. Read-only property, set at create."
        maxIdleTimeMillis:
          type: integer
        name:
          type: string
        roleAttributes:
          type: array
          items:
            type: string
        tags:
          $ref: '#/components/schemas/tags'
        terminatorStrategy:
          type: string
    serviceUpdate:
      required:
      - name
      type: object
      properties:
        configs:
          type: array
          items:
            type: string
        encryptionRequired:
          type: boolean
          description: "Describes whether connections must support end-to-end encryption\
            \ on both sides of the connection. Read-only property, set at create."
        maxIdleTimeMillis:
          type: integer
        name:
          type: string
        roleAttributes:
          type: array
          items:
            type: string
        tags:
          $ref: '#/components/schemas/tags'
        terminatorStrategy:
          type: string
    sessionCreate:
      type: object
      properties:
        serviceId:
          type: string
        tags:
          $ref: '#/components/schemas/tags'
        type:
          $ref: '#/components/schemas/dialBind'
    sessionCreateEnvelope:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/sessionDetail'
        meta:
          $ref: '#/components/schemas/meta'
    sessionDetail:
      allOf:
      - $ref: '#/components/schemas/baseEntity'
      - required:
        - apiSession
        - apiSessionId
        - edgeRouters
        - identityId
        - service
        - serviceId
        - token
        - type
        type: object
        properties:
          apiSession:
            $ref: '#/components/schemas/entityRef'
          apiSessionId:
            type: string
          edgeRouters:
            type: array
            items:
              $ref: '#/components/schemas/sessionEdgeRouter'
          identityId:
            type: string
          service:
            $ref: '#/components/schemas/entityRef'
          serviceId:
            type: string
          token:
            type: string
          type:
            $ref: '#/components/schemas/dialBind'
    sessionEdgeRouter:
      allOf:
      - $ref: '#/components/schemas/commonEdgeRouterProperties'
      - required:
        - urls
        type: object
        properties:
          urls:
            type: object
            additionalProperties:
              type: string
    sessionList:
      type: array
      items:
        $ref: '#/components/schemas/sessionDetail'
    specBodyDetail:
      type: string
    specDetail:
      allOf:
      - $ref: '#/components/schemas/baseEntity'
      - required:
        - name
        type: object
        properties:
          name:
            type: string
    specList:
      type: array
      items:
        $ref: '#/components/schemas/specDetail'
    subTags:
      type: object
      additionalProperties:
        type: object
        properties: {}
    tags:
      description: "A map of user defined fields and values. The values are limited\
        \ to the following types/values: null, string, boolean"
      allOf:
      - $ref: '#/components/schemas/subTags'
    terminatorClientDetail:
      allOf:
      - $ref: '#/components/schemas/baseEntity'
      - required:
        - identity
        - routerId
        - service
        - serviceId
        type: object
        properties:
          identity:
            type: string
          routerId:
            type: string
          service:
            $ref: '#/components/schemas/entityRef'
          serviceId:
            type: string
    terminatorClientList:
      type: array
      items:
        $ref: '#/components/schemas/terminatorClientDetail'
    terminatorCost:
      maximum: 65535
      minimum: 0
      type: integer
    terminatorCostMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/terminatorCost'
    terminatorPrecedence:
      type: string
      enum:
      - default
      - required
      - failed
    terminatorPrecedenceMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/terminatorPrecedence'
    username:
      maxLength: 100
      minLength: 4
      type: string
    usernameNullable:
      maxLength: 100
      minLength: 4
      type: string
      nullable: true
      x-nullable: true
    version:
      type: object
      properties:
        apiVersions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/apiVersion'
        buildDate:
          type: string
          example: 2020-02-11 16:09:08
        capabilities:
          type: array
          items:
            type: string
        revision:
          type: string
          example: ea556fc18740
        runtimeVersion:
          type: string
          example: go1.13.5
        version:
          type: string
          example: v0.9.0
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /oidc/authorize
          tokenUrl: /oidc/token
          scopes:
            openid: openid
    ztSession:
      type: apiKey
      description: An API Key that is provided post authentication
      name: zt-session
      in: header
x-original-swagger-version: "2.0"
