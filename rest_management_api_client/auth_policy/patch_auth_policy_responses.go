// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package auth_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openziti/edge-api/rest_model"
)

// PatchAuthPolicyReader is a Reader for the PatchAuthPolicy structure.
type PatchAuthPolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchAuthPolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchAuthPolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchAuthPolicyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchAuthPolicyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchAuthPolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchAuthPolicyTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /auth-policies/{id}] patchAuthPolicy", response, response.Code())
	}
}

// NewPatchAuthPolicyOK creates a PatchAuthPolicyOK with default headers values
func NewPatchAuthPolicyOK() *PatchAuthPolicyOK {
	return &PatchAuthPolicyOK{}
}

/*
PatchAuthPolicyOK describes a response with status code 200, with default header values.

The patch request was successful and the resource has been altered
*/
type PatchAuthPolicyOK struct {
	Payload *rest_model.Empty
}

// IsSuccess returns true when this patch auth policy o k response has a 2xx status code
func (o *PatchAuthPolicyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch auth policy o k response has a 3xx status code
func (o *PatchAuthPolicyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch auth policy o k response has a 4xx status code
func (o *PatchAuthPolicyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch auth policy o k response has a 5xx status code
func (o *PatchAuthPolicyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch auth policy o k response a status code equal to that given
func (o *PatchAuthPolicyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch auth policy o k response
func (o *PatchAuthPolicyOK) Code() int {
	return 200
}

func (o *PatchAuthPolicyOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /auth-policies/{id}][%d] patchAuthPolicyOK %s", 200, payload)
}

func (o *PatchAuthPolicyOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /auth-policies/{id}][%d] patchAuthPolicyOK %s", 200, payload)
}

func (o *PatchAuthPolicyOK) GetPayload() *rest_model.Empty {
	return o.Payload
}

func (o *PatchAuthPolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.Empty)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthPolicyBadRequest creates a PatchAuthPolicyBadRequest with default headers values
func NewPatchAuthPolicyBadRequest() *PatchAuthPolicyBadRequest {
	return &PatchAuthPolicyBadRequest{}
}

/*
PatchAuthPolicyBadRequest describes a response with status code 400, with default header values.

The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information
*/
type PatchAuthPolicyBadRequest struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this patch auth policy bad request response has a 2xx status code
func (o *PatchAuthPolicyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch auth policy bad request response has a 3xx status code
func (o *PatchAuthPolicyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch auth policy bad request response has a 4xx status code
func (o *PatchAuthPolicyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch auth policy bad request response has a 5xx status code
func (o *PatchAuthPolicyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch auth policy bad request response a status code equal to that given
func (o *PatchAuthPolicyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the patch auth policy bad request response
func (o *PatchAuthPolicyBadRequest) Code() int {
	return 400
}

func (o *PatchAuthPolicyBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /auth-policies/{id}][%d] patchAuthPolicyBadRequest %s", 400, payload)
}

func (o *PatchAuthPolicyBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /auth-policies/{id}][%d] patchAuthPolicyBadRequest %s", 400, payload)
}

func (o *PatchAuthPolicyBadRequest) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PatchAuthPolicyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthPolicyUnauthorized creates a PatchAuthPolicyUnauthorized with default headers values
func NewPatchAuthPolicyUnauthorized() *PatchAuthPolicyUnauthorized {
	return &PatchAuthPolicyUnauthorized{}
}

/*
PatchAuthPolicyUnauthorized describes a response with status code 401, with default header values.

The supplied session does not have the correct access rights to request this resource
*/
type PatchAuthPolicyUnauthorized struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this patch auth policy unauthorized response has a 2xx status code
func (o *PatchAuthPolicyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch auth policy unauthorized response has a 3xx status code
func (o *PatchAuthPolicyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch auth policy unauthorized response has a 4xx status code
func (o *PatchAuthPolicyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch auth policy unauthorized response has a 5xx status code
func (o *PatchAuthPolicyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch auth policy unauthorized response a status code equal to that given
func (o *PatchAuthPolicyUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the patch auth policy unauthorized response
func (o *PatchAuthPolicyUnauthorized) Code() int {
	return 401
}

func (o *PatchAuthPolicyUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /auth-policies/{id}][%d] patchAuthPolicyUnauthorized %s", 401, payload)
}

func (o *PatchAuthPolicyUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /auth-policies/{id}][%d] patchAuthPolicyUnauthorized %s", 401, payload)
}

func (o *PatchAuthPolicyUnauthorized) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PatchAuthPolicyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthPolicyNotFound creates a PatchAuthPolicyNotFound with default headers values
func NewPatchAuthPolicyNotFound() *PatchAuthPolicyNotFound {
	return &PatchAuthPolicyNotFound{}
}

/*
PatchAuthPolicyNotFound describes a response with status code 404, with default header values.

The requested resource does not exist
*/
type PatchAuthPolicyNotFound struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this patch auth policy not found response has a 2xx status code
func (o *PatchAuthPolicyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch auth policy not found response has a 3xx status code
func (o *PatchAuthPolicyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch auth policy not found response has a 4xx status code
func (o *PatchAuthPolicyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch auth policy not found response has a 5xx status code
func (o *PatchAuthPolicyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch auth policy not found response a status code equal to that given
func (o *PatchAuthPolicyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the patch auth policy not found response
func (o *PatchAuthPolicyNotFound) Code() int {
	return 404
}

func (o *PatchAuthPolicyNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /auth-policies/{id}][%d] patchAuthPolicyNotFound %s", 404, payload)
}

func (o *PatchAuthPolicyNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /auth-policies/{id}][%d] patchAuthPolicyNotFound %s", 404, payload)
}

func (o *PatchAuthPolicyNotFound) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PatchAuthPolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthPolicyTooManyRequests creates a PatchAuthPolicyTooManyRequests with default headers values
func NewPatchAuthPolicyTooManyRequests() *PatchAuthPolicyTooManyRequests {
	return &PatchAuthPolicyTooManyRequests{}
}

/*
PatchAuthPolicyTooManyRequests describes a response with status code 429, with default header values.

The resource requested is rate limited and the rate limit has been exceeded
*/
type PatchAuthPolicyTooManyRequests struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this patch auth policy too many requests response has a 2xx status code
func (o *PatchAuthPolicyTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch auth policy too many requests response has a 3xx status code
func (o *PatchAuthPolicyTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch auth policy too many requests response has a 4xx status code
func (o *PatchAuthPolicyTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch auth policy too many requests response has a 5xx status code
func (o *PatchAuthPolicyTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch auth policy too many requests response a status code equal to that given
func (o *PatchAuthPolicyTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the patch auth policy too many requests response
func (o *PatchAuthPolicyTooManyRequests) Code() int {
	return 429
}

func (o *PatchAuthPolicyTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /auth-policies/{id}][%d] patchAuthPolicyTooManyRequests %s", 429, payload)
}

func (o *PatchAuthPolicyTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /auth-policies/{id}][%d] patchAuthPolicyTooManyRequests %s", 429, payload)
}

func (o *PatchAuthPolicyTooManyRequests) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PatchAuthPolicyTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
