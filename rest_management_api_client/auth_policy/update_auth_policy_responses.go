// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package auth_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openziti/edge-api/rest_model"
)

// UpdateAuthPolicyReader is a Reader for the UpdateAuthPolicy structure.
type UpdateAuthPolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAuthPolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAuthPolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAuthPolicyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateAuthPolicyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAuthPolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateAuthPolicyTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /auth-policies/{id}] updateAuthPolicy", response, response.Code())
	}
}

// NewUpdateAuthPolicyOK creates a UpdateAuthPolicyOK with default headers values
func NewUpdateAuthPolicyOK() *UpdateAuthPolicyOK {
	return &UpdateAuthPolicyOK{}
}

/*
UpdateAuthPolicyOK describes a response with status code 200, with default header values.

The update request was successful and the resource has been altered
*/
type UpdateAuthPolicyOK struct {
	Payload *rest_model.Empty
}

// IsSuccess returns true when this update auth policy o k response has a 2xx status code
func (o *UpdateAuthPolicyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update auth policy o k response has a 3xx status code
func (o *UpdateAuthPolicyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update auth policy o k response has a 4xx status code
func (o *UpdateAuthPolicyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update auth policy o k response has a 5xx status code
func (o *UpdateAuthPolicyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update auth policy o k response a status code equal to that given
func (o *UpdateAuthPolicyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update auth policy o k response
func (o *UpdateAuthPolicyOK) Code() int {
	return 200
}

func (o *UpdateAuthPolicyOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /auth-policies/{id}][%d] updateAuthPolicyOK %s", 200, payload)
}

func (o *UpdateAuthPolicyOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /auth-policies/{id}][%d] updateAuthPolicyOK %s", 200, payload)
}

func (o *UpdateAuthPolicyOK) GetPayload() *rest_model.Empty {
	return o.Payload
}

func (o *UpdateAuthPolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.Empty)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthPolicyBadRequest creates a UpdateAuthPolicyBadRequest with default headers values
func NewUpdateAuthPolicyBadRequest() *UpdateAuthPolicyBadRequest {
	return &UpdateAuthPolicyBadRequest{}
}

/*
UpdateAuthPolicyBadRequest describes a response with status code 400, with default header values.

The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information
*/
type UpdateAuthPolicyBadRequest struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this update auth policy bad request response has a 2xx status code
func (o *UpdateAuthPolicyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update auth policy bad request response has a 3xx status code
func (o *UpdateAuthPolicyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update auth policy bad request response has a 4xx status code
func (o *UpdateAuthPolicyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update auth policy bad request response has a 5xx status code
func (o *UpdateAuthPolicyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update auth policy bad request response a status code equal to that given
func (o *UpdateAuthPolicyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update auth policy bad request response
func (o *UpdateAuthPolicyBadRequest) Code() int {
	return 400
}

func (o *UpdateAuthPolicyBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /auth-policies/{id}][%d] updateAuthPolicyBadRequest %s", 400, payload)
}

func (o *UpdateAuthPolicyBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /auth-policies/{id}][%d] updateAuthPolicyBadRequest %s", 400, payload)
}

func (o *UpdateAuthPolicyBadRequest) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *UpdateAuthPolicyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthPolicyUnauthorized creates a UpdateAuthPolicyUnauthorized with default headers values
func NewUpdateAuthPolicyUnauthorized() *UpdateAuthPolicyUnauthorized {
	return &UpdateAuthPolicyUnauthorized{}
}

/*
UpdateAuthPolicyUnauthorized describes a response with status code 401, with default header values.

The supplied session does not have the correct access rights to request this resource
*/
type UpdateAuthPolicyUnauthorized struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this update auth policy unauthorized response has a 2xx status code
func (o *UpdateAuthPolicyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update auth policy unauthorized response has a 3xx status code
func (o *UpdateAuthPolicyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update auth policy unauthorized response has a 4xx status code
func (o *UpdateAuthPolicyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update auth policy unauthorized response has a 5xx status code
func (o *UpdateAuthPolicyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update auth policy unauthorized response a status code equal to that given
func (o *UpdateAuthPolicyUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update auth policy unauthorized response
func (o *UpdateAuthPolicyUnauthorized) Code() int {
	return 401
}

func (o *UpdateAuthPolicyUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /auth-policies/{id}][%d] updateAuthPolicyUnauthorized %s", 401, payload)
}

func (o *UpdateAuthPolicyUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /auth-policies/{id}][%d] updateAuthPolicyUnauthorized %s", 401, payload)
}

func (o *UpdateAuthPolicyUnauthorized) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *UpdateAuthPolicyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthPolicyNotFound creates a UpdateAuthPolicyNotFound with default headers values
func NewUpdateAuthPolicyNotFound() *UpdateAuthPolicyNotFound {
	return &UpdateAuthPolicyNotFound{}
}

/*
UpdateAuthPolicyNotFound describes a response with status code 404, with default header values.

The requested resource does not exist
*/
type UpdateAuthPolicyNotFound struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this update auth policy not found response has a 2xx status code
func (o *UpdateAuthPolicyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update auth policy not found response has a 3xx status code
func (o *UpdateAuthPolicyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update auth policy not found response has a 4xx status code
func (o *UpdateAuthPolicyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update auth policy not found response has a 5xx status code
func (o *UpdateAuthPolicyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update auth policy not found response a status code equal to that given
func (o *UpdateAuthPolicyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update auth policy not found response
func (o *UpdateAuthPolicyNotFound) Code() int {
	return 404
}

func (o *UpdateAuthPolicyNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /auth-policies/{id}][%d] updateAuthPolicyNotFound %s", 404, payload)
}

func (o *UpdateAuthPolicyNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /auth-policies/{id}][%d] updateAuthPolicyNotFound %s", 404, payload)
}

func (o *UpdateAuthPolicyNotFound) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *UpdateAuthPolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthPolicyTooManyRequests creates a UpdateAuthPolicyTooManyRequests with default headers values
func NewUpdateAuthPolicyTooManyRequests() *UpdateAuthPolicyTooManyRequests {
	return &UpdateAuthPolicyTooManyRequests{}
}

/*
UpdateAuthPolicyTooManyRequests describes a response with status code 429, with default header values.

The resource requested is rate limited and the rate limit has been exceeded
*/
type UpdateAuthPolicyTooManyRequests struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this update auth policy too many requests response has a 2xx status code
func (o *UpdateAuthPolicyTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update auth policy too many requests response has a 3xx status code
func (o *UpdateAuthPolicyTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update auth policy too many requests response has a 4xx status code
func (o *UpdateAuthPolicyTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update auth policy too many requests response has a 5xx status code
func (o *UpdateAuthPolicyTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update auth policy too many requests response a status code equal to that given
func (o *UpdateAuthPolicyTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update auth policy too many requests response
func (o *UpdateAuthPolicyTooManyRequests) Code() int {
	return 429
}

func (o *UpdateAuthPolicyTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /auth-policies/{id}][%d] updateAuthPolicyTooManyRequests %s", 429, payload)
}

func (o *UpdateAuthPolicyTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /auth-policies/{id}][%d] updateAuthPolicyTooManyRequests %s", 429, payload)
}

func (o *UpdateAuthPolicyTooManyRequests) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *UpdateAuthPolicyTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
