// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openziti/edge-api/rest_model"
)

// PatchIdentityReader is a Reader for the PatchIdentity structure.
type PatchIdentityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchIdentityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchIdentityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchIdentityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchIdentityUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchIdentityNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchIdentityTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /identities/{id}] patchIdentity", response, response.Code())
	}
}

// NewPatchIdentityOK creates a PatchIdentityOK with default headers values
func NewPatchIdentityOK() *PatchIdentityOK {
	return &PatchIdentityOK{}
}

/*
PatchIdentityOK describes a response with status code 200, with default header values.

The patch request was successful and the resource has been altered
*/
type PatchIdentityOK struct {
	Payload *rest_model.Empty
}

// IsSuccess returns true when this patch identity o k response has a 2xx status code
func (o *PatchIdentityOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch identity o k response has a 3xx status code
func (o *PatchIdentityOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch identity o k response has a 4xx status code
func (o *PatchIdentityOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch identity o k response has a 5xx status code
func (o *PatchIdentityOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch identity o k response a status code equal to that given
func (o *PatchIdentityOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch identity o k response
func (o *PatchIdentityOK) Code() int {
	return 200
}

func (o *PatchIdentityOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /identities/{id}][%d] patchIdentityOK %s", 200, payload)
}

func (o *PatchIdentityOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /identities/{id}][%d] patchIdentityOK %s", 200, payload)
}

func (o *PatchIdentityOK) GetPayload() *rest_model.Empty {
	return o.Payload
}

func (o *PatchIdentityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.Empty)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchIdentityBadRequest creates a PatchIdentityBadRequest with default headers values
func NewPatchIdentityBadRequest() *PatchIdentityBadRequest {
	return &PatchIdentityBadRequest{}
}

/*
PatchIdentityBadRequest describes a response with status code 400, with default header values.

The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information
*/
type PatchIdentityBadRequest struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this patch identity bad request response has a 2xx status code
func (o *PatchIdentityBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch identity bad request response has a 3xx status code
func (o *PatchIdentityBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch identity bad request response has a 4xx status code
func (o *PatchIdentityBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch identity bad request response has a 5xx status code
func (o *PatchIdentityBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch identity bad request response a status code equal to that given
func (o *PatchIdentityBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the patch identity bad request response
func (o *PatchIdentityBadRequest) Code() int {
	return 400
}

func (o *PatchIdentityBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /identities/{id}][%d] patchIdentityBadRequest %s", 400, payload)
}

func (o *PatchIdentityBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /identities/{id}][%d] patchIdentityBadRequest %s", 400, payload)
}

func (o *PatchIdentityBadRequest) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PatchIdentityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchIdentityUnauthorized creates a PatchIdentityUnauthorized with default headers values
func NewPatchIdentityUnauthorized() *PatchIdentityUnauthorized {
	return &PatchIdentityUnauthorized{}
}

/*
PatchIdentityUnauthorized describes a response with status code 401, with default header values.

The supplied session does not have the correct access rights to request this resource
*/
type PatchIdentityUnauthorized struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this patch identity unauthorized response has a 2xx status code
func (o *PatchIdentityUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch identity unauthorized response has a 3xx status code
func (o *PatchIdentityUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch identity unauthorized response has a 4xx status code
func (o *PatchIdentityUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch identity unauthorized response has a 5xx status code
func (o *PatchIdentityUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch identity unauthorized response a status code equal to that given
func (o *PatchIdentityUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the patch identity unauthorized response
func (o *PatchIdentityUnauthorized) Code() int {
	return 401
}

func (o *PatchIdentityUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /identities/{id}][%d] patchIdentityUnauthorized %s", 401, payload)
}

func (o *PatchIdentityUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /identities/{id}][%d] patchIdentityUnauthorized %s", 401, payload)
}

func (o *PatchIdentityUnauthorized) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PatchIdentityUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchIdentityNotFound creates a PatchIdentityNotFound with default headers values
func NewPatchIdentityNotFound() *PatchIdentityNotFound {
	return &PatchIdentityNotFound{}
}

/*
PatchIdentityNotFound describes a response with status code 404, with default header values.

The requested resource does not exist
*/
type PatchIdentityNotFound struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this patch identity not found response has a 2xx status code
func (o *PatchIdentityNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch identity not found response has a 3xx status code
func (o *PatchIdentityNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch identity not found response has a 4xx status code
func (o *PatchIdentityNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch identity not found response has a 5xx status code
func (o *PatchIdentityNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch identity not found response a status code equal to that given
func (o *PatchIdentityNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the patch identity not found response
func (o *PatchIdentityNotFound) Code() int {
	return 404
}

func (o *PatchIdentityNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /identities/{id}][%d] patchIdentityNotFound %s", 404, payload)
}

func (o *PatchIdentityNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /identities/{id}][%d] patchIdentityNotFound %s", 404, payload)
}

func (o *PatchIdentityNotFound) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PatchIdentityNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchIdentityTooManyRequests creates a PatchIdentityTooManyRequests with default headers values
func NewPatchIdentityTooManyRequests() *PatchIdentityTooManyRequests {
	return &PatchIdentityTooManyRequests{}
}

/*
PatchIdentityTooManyRequests describes a response with status code 429, with default header values.

The resource requested is rate limited and the rate limit has been exceeded
*/
type PatchIdentityTooManyRequests struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this patch identity too many requests response has a 2xx status code
func (o *PatchIdentityTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch identity too many requests response has a 3xx status code
func (o *PatchIdentityTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch identity too many requests response has a 4xx status code
func (o *PatchIdentityTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch identity too many requests response has a 5xx status code
func (o *PatchIdentityTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch identity too many requests response a status code equal to that given
func (o *PatchIdentityTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the patch identity too many requests response
func (o *PatchIdentityTooManyRequests) Code() int {
	return 429
}

func (o *PatchIdentityTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /identities/{id}][%d] patchIdentityTooManyRequests %s", 429, payload)
}

func (o *PatchIdentityTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /identities/{id}][%d] patchIdentityTooManyRequests %s", 429, payload)
}

func (o *PatchIdentityTooManyRequests) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PatchIdentityTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
