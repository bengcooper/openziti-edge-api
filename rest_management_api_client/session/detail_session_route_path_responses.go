// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openziti/edge-api/rest_model"
)

// DetailSessionRoutePathReader is a Reader for the DetailSessionRoutePath structure.
type DetailSessionRoutePathReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DetailSessionRoutePathReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDetailSessionRoutePathOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDetailSessionRoutePathUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDetailSessionRoutePathNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDetailSessionRoutePathTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /sessions/{id}/route-path] detailSessionRoutePath", response, response.Code())
	}
}

// NewDetailSessionRoutePathOK creates a DetailSessionRoutePathOK with default headers values
func NewDetailSessionRoutePathOK() *DetailSessionRoutePathOK {
	return &DetailSessionRoutePathOK{}
}

/*
DetailSessionRoutePathOK describes a response with status code 200, with default header values.

A single session's route path
*/
type DetailSessionRoutePathOK struct {
	Payload *rest_model.DetailSessionRoutePathEnvelope
}

// IsSuccess returns true when this detail session route path o k response has a 2xx status code
func (o *DetailSessionRoutePathOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this detail session route path o k response has a 3xx status code
func (o *DetailSessionRoutePathOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detail session route path o k response has a 4xx status code
func (o *DetailSessionRoutePathOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this detail session route path o k response has a 5xx status code
func (o *DetailSessionRoutePathOK) IsServerError() bool {
	return false
}

// IsCode returns true when this detail session route path o k response a status code equal to that given
func (o *DetailSessionRoutePathOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the detail session route path o k response
func (o *DetailSessionRoutePathOK) Code() int {
	return 200
}

func (o *DetailSessionRoutePathOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /sessions/{id}/route-path][%d] detailSessionRoutePathOK %s", 200, payload)
}

func (o *DetailSessionRoutePathOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /sessions/{id}/route-path][%d] detailSessionRoutePathOK %s", 200, payload)
}

func (o *DetailSessionRoutePathOK) GetPayload() *rest_model.DetailSessionRoutePathEnvelope {
	return o.Payload
}

func (o *DetailSessionRoutePathOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.DetailSessionRoutePathEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetailSessionRoutePathUnauthorized creates a DetailSessionRoutePathUnauthorized with default headers values
func NewDetailSessionRoutePathUnauthorized() *DetailSessionRoutePathUnauthorized {
	return &DetailSessionRoutePathUnauthorized{}
}

/*
DetailSessionRoutePathUnauthorized describes a response with status code 401, with default header values.

The supplied session does not have the correct access rights to request this resource
*/
type DetailSessionRoutePathUnauthorized struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this detail session route path unauthorized response has a 2xx status code
func (o *DetailSessionRoutePathUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this detail session route path unauthorized response has a 3xx status code
func (o *DetailSessionRoutePathUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detail session route path unauthorized response has a 4xx status code
func (o *DetailSessionRoutePathUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this detail session route path unauthorized response has a 5xx status code
func (o *DetailSessionRoutePathUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this detail session route path unauthorized response a status code equal to that given
func (o *DetailSessionRoutePathUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the detail session route path unauthorized response
func (o *DetailSessionRoutePathUnauthorized) Code() int {
	return 401
}

func (o *DetailSessionRoutePathUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /sessions/{id}/route-path][%d] detailSessionRoutePathUnauthorized %s", 401, payload)
}

func (o *DetailSessionRoutePathUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /sessions/{id}/route-path][%d] detailSessionRoutePathUnauthorized %s", 401, payload)
}

func (o *DetailSessionRoutePathUnauthorized) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *DetailSessionRoutePathUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetailSessionRoutePathNotFound creates a DetailSessionRoutePathNotFound with default headers values
func NewDetailSessionRoutePathNotFound() *DetailSessionRoutePathNotFound {
	return &DetailSessionRoutePathNotFound{}
}

/*
DetailSessionRoutePathNotFound describes a response with status code 404, with default header values.

The requested resource does not exist
*/
type DetailSessionRoutePathNotFound struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this detail session route path not found response has a 2xx status code
func (o *DetailSessionRoutePathNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this detail session route path not found response has a 3xx status code
func (o *DetailSessionRoutePathNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detail session route path not found response has a 4xx status code
func (o *DetailSessionRoutePathNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this detail session route path not found response has a 5xx status code
func (o *DetailSessionRoutePathNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this detail session route path not found response a status code equal to that given
func (o *DetailSessionRoutePathNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the detail session route path not found response
func (o *DetailSessionRoutePathNotFound) Code() int {
	return 404
}

func (o *DetailSessionRoutePathNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /sessions/{id}/route-path][%d] detailSessionRoutePathNotFound %s", 404, payload)
}

func (o *DetailSessionRoutePathNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /sessions/{id}/route-path][%d] detailSessionRoutePathNotFound %s", 404, payload)
}

func (o *DetailSessionRoutePathNotFound) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *DetailSessionRoutePathNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetailSessionRoutePathTooManyRequests creates a DetailSessionRoutePathTooManyRequests with default headers values
func NewDetailSessionRoutePathTooManyRequests() *DetailSessionRoutePathTooManyRequests {
	return &DetailSessionRoutePathTooManyRequests{}
}

/*
DetailSessionRoutePathTooManyRequests describes a response with status code 429, with default header values.

The resource requested is rate limited and the rate limit has been exceeded
*/
type DetailSessionRoutePathTooManyRequests struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this detail session route path too many requests response has a 2xx status code
func (o *DetailSessionRoutePathTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this detail session route path too many requests response has a 3xx status code
func (o *DetailSessionRoutePathTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this detail session route path too many requests response has a 4xx status code
func (o *DetailSessionRoutePathTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this detail session route path too many requests response has a 5xx status code
func (o *DetailSessionRoutePathTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this detail session route path too many requests response a status code equal to that given
func (o *DetailSessionRoutePathTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the detail session route path too many requests response
func (o *DetailSessionRoutePathTooManyRequests) Code() int {
	return 429
}

func (o *DetailSessionRoutePathTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /sessions/{id}/route-path][%d] detailSessionRoutePathTooManyRequests %s", 429, payload)
}

func (o *DetailSessionRoutePathTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /sessions/{id}/route-path][%d] detailSessionRoutePathTooManyRequests %s", 429, payload)
}

func (o *DetailSessionRoutePathTooManyRequests) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *DetailSessionRoutePathTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
