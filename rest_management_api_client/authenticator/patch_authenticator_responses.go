// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package authenticator

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openziti/edge-api/rest_model"
)

// PatchAuthenticatorReader is a Reader for the PatchAuthenticator structure.
type PatchAuthenticatorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchAuthenticatorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchAuthenticatorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchAuthenticatorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchAuthenticatorUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchAuthenticatorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchAuthenticatorTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /authenticators/{id}] patchAuthenticator", response, response.Code())
	}
}

// NewPatchAuthenticatorOK creates a PatchAuthenticatorOK with default headers values
func NewPatchAuthenticatorOK() *PatchAuthenticatorOK {
	return &PatchAuthenticatorOK{}
}

/*
PatchAuthenticatorOK describes a response with status code 200, with default header values.

The patch request was successful and the resource has been altered
*/
type PatchAuthenticatorOK struct {
	Payload *rest_model.Empty
}

// IsSuccess returns true when this patch authenticator o k response has a 2xx status code
func (o *PatchAuthenticatorOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch authenticator o k response has a 3xx status code
func (o *PatchAuthenticatorOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch authenticator o k response has a 4xx status code
func (o *PatchAuthenticatorOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch authenticator o k response has a 5xx status code
func (o *PatchAuthenticatorOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch authenticator o k response a status code equal to that given
func (o *PatchAuthenticatorOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch authenticator o k response
func (o *PatchAuthenticatorOK) Code() int {
	return 200
}

func (o *PatchAuthenticatorOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /authenticators/{id}][%d] patchAuthenticatorOK %s", 200, payload)
}

func (o *PatchAuthenticatorOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /authenticators/{id}][%d] patchAuthenticatorOK %s", 200, payload)
}

func (o *PatchAuthenticatorOK) GetPayload() *rest_model.Empty {
	return o.Payload
}

func (o *PatchAuthenticatorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.Empty)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthenticatorBadRequest creates a PatchAuthenticatorBadRequest with default headers values
func NewPatchAuthenticatorBadRequest() *PatchAuthenticatorBadRequest {
	return &PatchAuthenticatorBadRequest{}
}

/*
PatchAuthenticatorBadRequest describes a response with status code 400, with default header values.

The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information
*/
type PatchAuthenticatorBadRequest struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this patch authenticator bad request response has a 2xx status code
func (o *PatchAuthenticatorBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch authenticator bad request response has a 3xx status code
func (o *PatchAuthenticatorBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch authenticator bad request response has a 4xx status code
func (o *PatchAuthenticatorBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch authenticator bad request response has a 5xx status code
func (o *PatchAuthenticatorBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch authenticator bad request response a status code equal to that given
func (o *PatchAuthenticatorBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the patch authenticator bad request response
func (o *PatchAuthenticatorBadRequest) Code() int {
	return 400
}

func (o *PatchAuthenticatorBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /authenticators/{id}][%d] patchAuthenticatorBadRequest %s", 400, payload)
}

func (o *PatchAuthenticatorBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /authenticators/{id}][%d] patchAuthenticatorBadRequest %s", 400, payload)
}

func (o *PatchAuthenticatorBadRequest) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PatchAuthenticatorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthenticatorUnauthorized creates a PatchAuthenticatorUnauthorized with default headers values
func NewPatchAuthenticatorUnauthorized() *PatchAuthenticatorUnauthorized {
	return &PatchAuthenticatorUnauthorized{}
}

/*
PatchAuthenticatorUnauthorized describes a response with status code 401, with default header values.

The supplied session does not have the correct access rights to request this resource
*/
type PatchAuthenticatorUnauthorized struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this patch authenticator unauthorized response has a 2xx status code
func (o *PatchAuthenticatorUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch authenticator unauthorized response has a 3xx status code
func (o *PatchAuthenticatorUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch authenticator unauthorized response has a 4xx status code
func (o *PatchAuthenticatorUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch authenticator unauthorized response has a 5xx status code
func (o *PatchAuthenticatorUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch authenticator unauthorized response a status code equal to that given
func (o *PatchAuthenticatorUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the patch authenticator unauthorized response
func (o *PatchAuthenticatorUnauthorized) Code() int {
	return 401
}

func (o *PatchAuthenticatorUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /authenticators/{id}][%d] patchAuthenticatorUnauthorized %s", 401, payload)
}

func (o *PatchAuthenticatorUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /authenticators/{id}][%d] patchAuthenticatorUnauthorized %s", 401, payload)
}

func (o *PatchAuthenticatorUnauthorized) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PatchAuthenticatorUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthenticatorNotFound creates a PatchAuthenticatorNotFound with default headers values
func NewPatchAuthenticatorNotFound() *PatchAuthenticatorNotFound {
	return &PatchAuthenticatorNotFound{}
}

/*
PatchAuthenticatorNotFound describes a response with status code 404, with default header values.

The requested resource does not exist
*/
type PatchAuthenticatorNotFound struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this patch authenticator not found response has a 2xx status code
func (o *PatchAuthenticatorNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch authenticator not found response has a 3xx status code
func (o *PatchAuthenticatorNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch authenticator not found response has a 4xx status code
func (o *PatchAuthenticatorNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch authenticator not found response has a 5xx status code
func (o *PatchAuthenticatorNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch authenticator not found response a status code equal to that given
func (o *PatchAuthenticatorNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the patch authenticator not found response
func (o *PatchAuthenticatorNotFound) Code() int {
	return 404
}

func (o *PatchAuthenticatorNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /authenticators/{id}][%d] patchAuthenticatorNotFound %s", 404, payload)
}

func (o *PatchAuthenticatorNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /authenticators/{id}][%d] patchAuthenticatorNotFound %s", 404, payload)
}

func (o *PatchAuthenticatorNotFound) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PatchAuthenticatorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAuthenticatorTooManyRequests creates a PatchAuthenticatorTooManyRequests with default headers values
func NewPatchAuthenticatorTooManyRequests() *PatchAuthenticatorTooManyRequests {
	return &PatchAuthenticatorTooManyRequests{}
}

/*
PatchAuthenticatorTooManyRequests describes a response with status code 429, with default header values.

The resource requested is rate limited and the rate limit has been exceeded
*/
type PatchAuthenticatorTooManyRequests struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this patch authenticator too many requests response has a 2xx status code
func (o *PatchAuthenticatorTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch authenticator too many requests response has a 3xx status code
func (o *PatchAuthenticatorTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch authenticator too many requests response has a 4xx status code
func (o *PatchAuthenticatorTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch authenticator too many requests response has a 5xx status code
func (o *PatchAuthenticatorTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch authenticator too many requests response a status code equal to that given
func (o *PatchAuthenticatorTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the patch authenticator too many requests response
func (o *PatchAuthenticatorTooManyRequests) Code() int {
	return 429
}

func (o *PatchAuthenticatorTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /authenticators/{id}][%d] patchAuthenticatorTooManyRequests %s", 429, payload)
}

func (o *PatchAuthenticatorTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /authenticators/{id}][%d] patchAuthenticatorTooManyRequests %s", 429, payload)
}

func (o *PatchAuthenticatorTooManyRequests) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PatchAuthenticatorTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
