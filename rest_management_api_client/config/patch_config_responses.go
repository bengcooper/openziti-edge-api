// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openziti/edge-api/rest_model"
)

// PatchConfigReader is a Reader for the PatchConfig structure.
type PatchConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConfigUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConfigTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /configs/{id}] patchConfig", response, response.Code())
	}
}

// NewPatchConfigOK creates a PatchConfigOK with default headers values
func NewPatchConfigOK() *PatchConfigOK {
	return &PatchConfigOK{}
}

/*
PatchConfigOK describes a response with status code 200, with default header values.

The patch request was successful and the resource has been altered
*/
type PatchConfigOK struct {
	Payload *rest_model.Empty
}

// IsSuccess returns true when this patch config o k response has a 2xx status code
func (o *PatchConfigOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch config o k response has a 3xx status code
func (o *PatchConfigOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch config o k response has a 4xx status code
func (o *PatchConfigOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch config o k response has a 5xx status code
func (o *PatchConfigOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch config o k response a status code equal to that given
func (o *PatchConfigOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch config o k response
func (o *PatchConfigOK) Code() int {
	return 200
}

func (o *PatchConfigOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /configs/{id}][%d] patchConfigOK %s", 200, payload)
}

func (o *PatchConfigOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /configs/{id}][%d] patchConfigOK %s", 200, payload)
}

func (o *PatchConfigOK) GetPayload() *rest_model.Empty {
	return o.Payload
}

func (o *PatchConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.Empty)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConfigBadRequest creates a PatchConfigBadRequest with default headers values
func NewPatchConfigBadRequest() *PatchConfigBadRequest {
	return &PatchConfigBadRequest{}
}

/*
PatchConfigBadRequest describes a response with status code 400, with default header values.

The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information
*/
type PatchConfigBadRequest struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this patch config bad request response has a 2xx status code
func (o *PatchConfigBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch config bad request response has a 3xx status code
func (o *PatchConfigBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch config bad request response has a 4xx status code
func (o *PatchConfigBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch config bad request response has a 5xx status code
func (o *PatchConfigBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch config bad request response a status code equal to that given
func (o *PatchConfigBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the patch config bad request response
func (o *PatchConfigBadRequest) Code() int {
	return 400
}

func (o *PatchConfigBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /configs/{id}][%d] patchConfigBadRequest %s", 400, payload)
}

func (o *PatchConfigBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /configs/{id}][%d] patchConfigBadRequest %s", 400, payload)
}

func (o *PatchConfigBadRequest) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PatchConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConfigUnauthorized creates a PatchConfigUnauthorized with default headers values
func NewPatchConfigUnauthorized() *PatchConfigUnauthorized {
	return &PatchConfigUnauthorized{}
}

/*
PatchConfigUnauthorized describes a response with status code 401, with default header values.

The supplied session does not have the correct access rights to request this resource
*/
type PatchConfigUnauthorized struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this patch config unauthorized response has a 2xx status code
func (o *PatchConfigUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch config unauthorized response has a 3xx status code
func (o *PatchConfigUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch config unauthorized response has a 4xx status code
func (o *PatchConfigUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch config unauthorized response has a 5xx status code
func (o *PatchConfigUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch config unauthorized response a status code equal to that given
func (o *PatchConfigUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the patch config unauthorized response
func (o *PatchConfigUnauthorized) Code() int {
	return 401
}

func (o *PatchConfigUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /configs/{id}][%d] patchConfigUnauthorized %s", 401, payload)
}

func (o *PatchConfigUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /configs/{id}][%d] patchConfigUnauthorized %s", 401, payload)
}

func (o *PatchConfigUnauthorized) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PatchConfigUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConfigNotFound creates a PatchConfigNotFound with default headers values
func NewPatchConfigNotFound() *PatchConfigNotFound {
	return &PatchConfigNotFound{}
}

/*
PatchConfigNotFound describes a response with status code 404, with default header values.

The requested resource does not exist
*/
type PatchConfigNotFound struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this patch config not found response has a 2xx status code
func (o *PatchConfigNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch config not found response has a 3xx status code
func (o *PatchConfigNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch config not found response has a 4xx status code
func (o *PatchConfigNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch config not found response has a 5xx status code
func (o *PatchConfigNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch config not found response a status code equal to that given
func (o *PatchConfigNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the patch config not found response
func (o *PatchConfigNotFound) Code() int {
	return 404
}

func (o *PatchConfigNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /configs/{id}][%d] patchConfigNotFound %s", 404, payload)
}

func (o *PatchConfigNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /configs/{id}][%d] patchConfigNotFound %s", 404, payload)
}

func (o *PatchConfigNotFound) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PatchConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConfigTooManyRequests creates a PatchConfigTooManyRequests with default headers values
func NewPatchConfigTooManyRequests() *PatchConfigTooManyRequests {
	return &PatchConfigTooManyRequests{}
}

/*
PatchConfigTooManyRequests describes a response with status code 429, with default header values.

The resource requested is rate limited and the rate limit has been exceeded
*/
type PatchConfigTooManyRequests struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this patch config too many requests response has a 2xx status code
func (o *PatchConfigTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch config too many requests response has a 3xx status code
func (o *PatchConfigTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch config too many requests response has a 4xx status code
func (o *PatchConfigTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch config too many requests response has a 5xx status code
func (o *PatchConfigTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch config too many requests response a status code equal to that given
func (o *PatchConfigTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the patch config too many requests response
func (o *PatchConfigTooManyRequests) Code() int {
	return 429
}

func (o *PatchConfigTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /configs/{id}][%d] patchConfigTooManyRequests %s", 429, payload)
}

func (o *PatchConfigTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /configs/{id}][%d] patchConfigTooManyRequests %s", 429, payload)
}

func (o *PatchConfigTooManyRequests) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PatchConfigTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
