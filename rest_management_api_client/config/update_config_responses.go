// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openziti/edge-api/rest_model"
)

// UpdateConfigReader is a Reader for the UpdateConfig structure.
type UpdateConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateConfigUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateConfigTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /configs/{id}] updateConfig", response, response.Code())
	}
}

// NewUpdateConfigOK creates a UpdateConfigOK with default headers values
func NewUpdateConfigOK() *UpdateConfigOK {
	return &UpdateConfigOK{}
}

/*
UpdateConfigOK describes a response with status code 200, with default header values.

The update request was successful and the resource has been altered
*/
type UpdateConfigOK struct {
	Payload *rest_model.Empty
}

// IsSuccess returns true when this update config o k response has a 2xx status code
func (o *UpdateConfigOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update config o k response has a 3xx status code
func (o *UpdateConfigOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update config o k response has a 4xx status code
func (o *UpdateConfigOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update config o k response has a 5xx status code
func (o *UpdateConfigOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update config o k response a status code equal to that given
func (o *UpdateConfigOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update config o k response
func (o *UpdateConfigOK) Code() int {
	return 200
}

func (o *UpdateConfigOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /configs/{id}][%d] updateConfigOK %s", 200, payload)
}

func (o *UpdateConfigOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /configs/{id}][%d] updateConfigOK %s", 200, payload)
}

func (o *UpdateConfigOK) GetPayload() *rest_model.Empty {
	return o.Payload
}

func (o *UpdateConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.Empty)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConfigBadRequest creates a UpdateConfigBadRequest with default headers values
func NewUpdateConfigBadRequest() *UpdateConfigBadRequest {
	return &UpdateConfigBadRequest{}
}

/*
UpdateConfigBadRequest describes a response with status code 400, with default header values.

The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information
*/
type UpdateConfigBadRequest struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this update config bad request response has a 2xx status code
func (o *UpdateConfigBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update config bad request response has a 3xx status code
func (o *UpdateConfigBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update config bad request response has a 4xx status code
func (o *UpdateConfigBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update config bad request response has a 5xx status code
func (o *UpdateConfigBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update config bad request response a status code equal to that given
func (o *UpdateConfigBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update config bad request response
func (o *UpdateConfigBadRequest) Code() int {
	return 400
}

func (o *UpdateConfigBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /configs/{id}][%d] updateConfigBadRequest %s", 400, payload)
}

func (o *UpdateConfigBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /configs/{id}][%d] updateConfigBadRequest %s", 400, payload)
}

func (o *UpdateConfigBadRequest) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *UpdateConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConfigUnauthorized creates a UpdateConfigUnauthorized with default headers values
func NewUpdateConfigUnauthorized() *UpdateConfigUnauthorized {
	return &UpdateConfigUnauthorized{}
}

/*
UpdateConfigUnauthorized describes a response with status code 401, with default header values.

The supplied session does not have the correct access rights to request this resource
*/
type UpdateConfigUnauthorized struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this update config unauthorized response has a 2xx status code
func (o *UpdateConfigUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update config unauthorized response has a 3xx status code
func (o *UpdateConfigUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update config unauthorized response has a 4xx status code
func (o *UpdateConfigUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update config unauthorized response has a 5xx status code
func (o *UpdateConfigUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update config unauthorized response a status code equal to that given
func (o *UpdateConfigUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update config unauthorized response
func (o *UpdateConfigUnauthorized) Code() int {
	return 401
}

func (o *UpdateConfigUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /configs/{id}][%d] updateConfigUnauthorized %s", 401, payload)
}

func (o *UpdateConfigUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /configs/{id}][%d] updateConfigUnauthorized %s", 401, payload)
}

func (o *UpdateConfigUnauthorized) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *UpdateConfigUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConfigNotFound creates a UpdateConfigNotFound with default headers values
func NewUpdateConfigNotFound() *UpdateConfigNotFound {
	return &UpdateConfigNotFound{}
}

/*
UpdateConfigNotFound describes a response with status code 404, with default header values.

The requested resource does not exist
*/
type UpdateConfigNotFound struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this update config not found response has a 2xx status code
func (o *UpdateConfigNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update config not found response has a 3xx status code
func (o *UpdateConfigNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update config not found response has a 4xx status code
func (o *UpdateConfigNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update config not found response has a 5xx status code
func (o *UpdateConfigNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update config not found response a status code equal to that given
func (o *UpdateConfigNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update config not found response
func (o *UpdateConfigNotFound) Code() int {
	return 404
}

func (o *UpdateConfigNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /configs/{id}][%d] updateConfigNotFound %s", 404, payload)
}

func (o *UpdateConfigNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /configs/{id}][%d] updateConfigNotFound %s", 404, payload)
}

func (o *UpdateConfigNotFound) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *UpdateConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConfigTooManyRequests creates a UpdateConfigTooManyRequests with default headers values
func NewUpdateConfigTooManyRequests() *UpdateConfigTooManyRequests {
	return &UpdateConfigTooManyRequests{}
}

/*
UpdateConfigTooManyRequests describes a response with status code 429, with default header values.

The resource requested is rate limited and the rate limit has been exceeded
*/
type UpdateConfigTooManyRequests struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this update config too many requests response has a 2xx status code
func (o *UpdateConfigTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update config too many requests response has a 3xx status code
func (o *UpdateConfigTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update config too many requests response has a 4xx status code
func (o *UpdateConfigTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update config too many requests response has a 5xx status code
func (o *UpdateConfigTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update config too many requests response a status code equal to that given
func (o *UpdateConfigTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update config too many requests response
func (o *UpdateConfigTooManyRequests) Code() int {
	return 429
}

func (o *UpdateConfigTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /configs/{id}][%d] updateConfigTooManyRequests %s", 429, payload)
}

func (o *UpdateConfigTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /configs/{id}][%d] updateConfigTooManyRequests %s", 429, payload)
}

func (o *UpdateConfigTooManyRequests) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *UpdateConfigTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
