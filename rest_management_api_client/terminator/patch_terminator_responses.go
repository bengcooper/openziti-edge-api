// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package terminator

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openziti/edge-api/rest_model"
)

// PatchTerminatorReader is a Reader for the PatchTerminator structure.
type PatchTerminatorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchTerminatorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchTerminatorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchTerminatorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchTerminatorUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchTerminatorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchTerminatorTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /terminators/{id}] patchTerminator", response, response.Code())
	}
}

// NewPatchTerminatorOK creates a PatchTerminatorOK with default headers values
func NewPatchTerminatorOK() *PatchTerminatorOK {
	return &PatchTerminatorOK{}
}

/*
PatchTerminatorOK describes a response with status code 200, with default header values.

The patch request was successful and the resource has been altered
*/
type PatchTerminatorOK struct {
	Payload *rest_model.Empty
}

// IsSuccess returns true when this patch terminator o k response has a 2xx status code
func (o *PatchTerminatorOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch terminator o k response has a 3xx status code
func (o *PatchTerminatorOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch terminator o k response has a 4xx status code
func (o *PatchTerminatorOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch terminator o k response has a 5xx status code
func (o *PatchTerminatorOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch terminator o k response a status code equal to that given
func (o *PatchTerminatorOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch terminator o k response
func (o *PatchTerminatorOK) Code() int {
	return 200
}

func (o *PatchTerminatorOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /terminators/{id}][%d] patchTerminatorOK %s", 200, payload)
}

func (o *PatchTerminatorOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /terminators/{id}][%d] patchTerminatorOK %s", 200, payload)
}

func (o *PatchTerminatorOK) GetPayload() *rest_model.Empty {
	return o.Payload
}

func (o *PatchTerminatorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.Empty)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchTerminatorBadRequest creates a PatchTerminatorBadRequest with default headers values
func NewPatchTerminatorBadRequest() *PatchTerminatorBadRequest {
	return &PatchTerminatorBadRequest{}
}

/*
PatchTerminatorBadRequest describes a response with status code 400, with default header values.

The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information
*/
type PatchTerminatorBadRequest struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this patch terminator bad request response has a 2xx status code
func (o *PatchTerminatorBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch terminator bad request response has a 3xx status code
func (o *PatchTerminatorBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch terminator bad request response has a 4xx status code
func (o *PatchTerminatorBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch terminator bad request response has a 5xx status code
func (o *PatchTerminatorBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch terminator bad request response a status code equal to that given
func (o *PatchTerminatorBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the patch terminator bad request response
func (o *PatchTerminatorBadRequest) Code() int {
	return 400
}

func (o *PatchTerminatorBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /terminators/{id}][%d] patchTerminatorBadRequest %s", 400, payload)
}

func (o *PatchTerminatorBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /terminators/{id}][%d] patchTerminatorBadRequest %s", 400, payload)
}

func (o *PatchTerminatorBadRequest) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PatchTerminatorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchTerminatorUnauthorized creates a PatchTerminatorUnauthorized with default headers values
func NewPatchTerminatorUnauthorized() *PatchTerminatorUnauthorized {
	return &PatchTerminatorUnauthorized{}
}

/*
PatchTerminatorUnauthorized describes a response with status code 401, with default header values.

The supplied session does not have the correct access rights to request this resource
*/
type PatchTerminatorUnauthorized struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this patch terminator unauthorized response has a 2xx status code
func (o *PatchTerminatorUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch terminator unauthorized response has a 3xx status code
func (o *PatchTerminatorUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch terminator unauthorized response has a 4xx status code
func (o *PatchTerminatorUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch terminator unauthorized response has a 5xx status code
func (o *PatchTerminatorUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch terminator unauthorized response a status code equal to that given
func (o *PatchTerminatorUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the patch terminator unauthorized response
func (o *PatchTerminatorUnauthorized) Code() int {
	return 401
}

func (o *PatchTerminatorUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /terminators/{id}][%d] patchTerminatorUnauthorized %s", 401, payload)
}

func (o *PatchTerminatorUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /terminators/{id}][%d] patchTerminatorUnauthorized %s", 401, payload)
}

func (o *PatchTerminatorUnauthorized) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PatchTerminatorUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchTerminatorNotFound creates a PatchTerminatorNotFound with default headers values
func NewPatchTerminatorNotFound() *PatchTerminatorNotFound {
	return &PatchTerminatorNotFound{}
}

/*
PatchTerminatorNotFound describes a response with status code 404, with default header values.

The requested resource does not exist
*/
type PatchTerminatorNotFound struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this patch terminator not found response has a 2xx status code
func (o *PatchTerminatorNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch terminator not found response has a 3xx status code
func (o *PatchTerminatorNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch terminator not found response has a 4xx status code
func (o *PatchTerminatorNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch terminator not found response has a 5xx status code
func (o *PatchTerminatorNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch terminator not found response a status code equal to that given
func (o *PatchTerminatorNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the patch terminator not found response
func (o *PatchTerminatorNotFound) Code() int {
	return 404
}

func (o *PatchTerminatorNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /terminators/{id}][%d] patchTerminatorNotFound %s", 404, payload)
}

func (o *PatchTerminatorNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /terminators/{id}][%d] patchTerminatorNotFound %s", 404, payload)
}

func (o *PatchTerminatorNotFound) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PatchTerminatorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchTerminatorTooManyRequests creates a PatchTerminatorTooManyRequests with default headers values
func NewPatchTerminatorTooManyRequests() *PatchTerminatorTooManyRequests {
	return &PatchTerminatorTooManyRequests{}
}

/*
PatchTerminatorTooManyRequests describes a response with status code 429, with default header values.

The resource requested is rate limited and the rate limit has been exceeded
*/
type PatchTerminatorTooManyRequests struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this patch terminator too many requests response has a 2xx status code
func (o *PatchTerminatorTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch terminator too many requests response has a 3xx status code
func (o *PatchTerminatorTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch terminator too many requests response has a 4xx status code
func (o *PatchTerminatorTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch terminator too many requests response has a 5xx status code
func (o *PatchTerminatorTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch terminator too many requests response a status code equal to that given
func (o *PatchTerminatorTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the patch terminator too many requests response
func (o *PatchTerminatorTooManyRequests) Code() int {
	return 429
}

func (o *PatchTerminatorTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /terminators/{id}][%d] patchTerminatorTooManyRequests %s", 429, payload)
}

func (o *PatchTerminatorTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /terminators/{id}][%d] patchTerminatorTooManyRequests %s", 429, payload)
}

func (o *PatchTerminatorTooManyRequests) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PatchTerminatorTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
