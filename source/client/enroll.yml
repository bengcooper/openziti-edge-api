openapi: 3.0.1
servers:
- url: /
paths:
  enroll:
    post:
      tags:
      - Enroll
      summary: Enroll an identity via one-time-token
      description: present a OTT and CSR to receive a long-lived client certificate
      operationId: enroll
      responses:
        "200":
          $ref: '#/components/responses/stringResponse'
        "404":
          $ref: ../shared/standard-responses.yml#/responses/notFoundResponse
        "429":
          $ref: ../shared/standard-responses.yml#/responses/rateLimitedResponse
    parameters:
    - $ref: ../shared/parameters.yml#/token-optional
    - $ref: ../shared/parameters.yml#/method-optional
  enroll-ca:
    post:
      tags:
      - Enroll
      summary: Enroll an identity with a pre-exchanged certificate
      description: |
        For CA auto enrollment, an identity is not created beforehand.
        Instead one will be created during enrollment. The client will present a client certificate that is signed by a
        Certificate Authority that has been added and verified (See POST /cas and POST /cas/{id}/verify).

        During this process no CSRs are requires as the client should already be in possession of a valid certificate.
      operationId: enrollCa
      responses:
        "200":
          $ref: ../shared/standard-responses.yml#/responses/emptyResponse
        "404":
          $ref: ../shared/standard-responses.yml#/responses/notFoundResponse
        "429":
          $ref: ../shared/standard-responses.yml#/responses/rateLimitedResponse
  enroll-ott:
    post:
      tags:
      - Enroll
      summary: Enroll an identity via one-time-token
      description: |
        Enroll an identity via a one-time-token which is supplied via a query string parameter. This enrollment method
        expects a PEM encoded CSRs to be provided for fulfillment. It is up to the enrolling identity to manage the
        private key backing the CSR request.
      operationId: enrollOtt
      responses:
        "200":
          $ref: '#/components/responses/enrollmentCerts'
        "404":
          $ref: ../shared/standard-responses.yml#/responses/notFoundResponse
        "429":
          $ref: ../shared/standard-responses.yml#/responses/rateLimitedResponse
    parameters:
    - name: ottEnrollmentRequest
      in: body
      description: An OTT enrollment request
      required: true
  enroll-ottca:
    post:
      tags:
      - Enroll
      summary: Enroll an identity via one-time-token with a pre-exchanged client certificate
      description: |
        Enroll an identity via a one-time-token that also requires a pre-exchanged client certificate to match a
        Certificate Authority that has been added and verified (See POST /cas and POST /cas{id}/verify). The client
        must present a client certificate signed by CA associated with the enrollment. This enrollment is similar to
        CA auto enrollment except that is required the identity to be pre-created.

        As the client certificate has been pre-exchanged there is no CSR input to this enrollment method.
      operationId: enrollOttCa
      responses:
        "200":
          $ref: ../shared/standard-responses.yml#/responses/emptyResponse
        "429":
          $ref: ../shared/standard-responses.yml#/responses/rateLimitedResponse
    parameters:
    - name: ottEnrollmentRequest
      in: body
      description: An OTT enrollment request
      required: true
  enroll-updb:
    post:
      tags:
      - Enroll
      summary: Enroll an identity via one-time-token
      description: |
        Enrolls an identity via a one-time-token to establish an initial username and password combination
      operationId: enrollUpdb
      responses:
        "200":
          $ref: ../shared/standard-responses.yml#/responses/emptyResponse
        "404":
          $ref: ../shared/standard-responses.yml#/responses/notFoundResponse
        "429":
          $ref: ../shared/standard-responses.yml#/responses/rateLimitedResponse
    parameters:
    - $ref: ../shared/parameters.yml#/token
    - name: updbCredentials
      in: body
      required: true
  enroll-erott:
    post:
      tags:
      - Enroll
      summary: Enroll an edge-router
      description: |
        Enrolls an edge-router via a one-time-token to establish a certificate based identity.
      operationId: enrollErOtt
      responses:
        "200":
          $ref: '#/components/responses/erOttResponse'
        "429":
          $ref: ../shared/standard-responses.yml#/responses/rateLimitedResponse
    parameters:
    - name: erOttEnrollmentRequest
      in: body
      description: An OTT enrollment request
      required: true
  enroll-extend-router:
    post:
      tags:
      - Enroll
      - Extend Enrollment
      summary: Extend the life of a currently enrolled router's certificates
      description: |
        Allows a router to extend its certificates' expiration date by
        using its current and valid client certificate to submit a CSR. This CSR may
        be passed in using a new private key, thus allowing private key rotation or swapping.

        After completion any new connections must be made with certificates returned from a 200 OK
        response. The previous client certificate is rendered invalid for use with the controller even if it
        has not expired.

        This request must be made using the existing, valid, client certificate.
      operationId: extendRouterEnrollment
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/routerExtendEnrollmentRequest'
        required: true
      responses:
        "200":
          $ref: '#/components/responses/routerExtendEnrollmentResponse'
        "401":
          $ref: ../shared/standard-responses.yml#/responses/unauthorizedResponse
        "429":
          $ref: ../shared/standard-responses.yml#/responses/rateLimitedResponse
      x-codegen-request-body-name: routerExtendEnrollmentRequest
  enroll-jwks:
    get:
      tags:
      - Enroll
      summary: List JSON Web Keys associated with enrollment
      description: |
        Returns a list of JSON Web Keys (JWKS) that are used for enrollment signing. The keys listed here are used
        to sign and co-sign enrollment JWTs. They can be verified through a challenge endpoint, using the public keys
        from this endpoint to verify the target machine has possession of the related private key.
      operationId: getEnrollmentJwks
      responses:
        "200":
          $ref: '#/components/responses/getJwksResponse'
  enroll-challenge:
    post:
      tags:
      - Enroll
      summary: Allows verification of a controller or cluster of controllers as being
        the valid target for enrollment.
      description: |
        A caller may submit a nonce and a key id (kid) from the enrollment JWKS endpoint or enrollment JWT that will
        be used to sign the nonce. The resulting signature may be validated with the associated public key in order
        to verify a networks identity during enrollment. The nonce must be a valid formatted UUID.
      operationId: enrollmentChallenge
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/nonceChallenge'
        required: true
      responses:
        "200":
          $ref: '#/components/responses/nonceChallengeResponse'
        "400":
          $ref: ../shared/standard-responses.yml#/responses/badRequestResponse
        "429":
          $ref: ../shared/standard-responses.yml#/responses/rateLimitedResponse
      x-codegen-request-body-name: nonce
components:
  schemas:
    ottEnrollmentRequest:
      type: object
      properties:
        token:
          type: string
        clientCsr:
          type: string
    erOttEnrollmentRequest:
      type: object
      properties:
        token:
          type: string
        clientCsr:
          type: string
        serverCsr:
          type: string
    enrollmentCertsEnvelope:
      type: object
      properties:
        meta:
          $ref: ../shared/standard-responses.yml#/definitions/meta
        data:
          $ref: '#/components/schemas/enrollmentCerts'
    enrollmentCerts:
      type: object
      properties:
        serverCert:
          type: string
          description: A PEM encoded set of certificates to use as the servers chain
        cert:
          type: string
          description: A PEM encoded set of certificates to use as the client chain
        ca:
          type: string
          description: A PEM encoded set of CA certificates to trust
    routerExtendEnrollmentRequest:
      required:
      - certCsr
      - serverCertCsr
      type: object
      properties:
        serverCertCsr:
          type: string
        certCsr:
          type: string
    nonceSignature:
      required:
      - algorithm
      - caPool
      - kid
      - signature
      type: object
      properties:
        signature:
          type: string
        algorithm:
          type: string
        kid:
          type: string
        caPool:
          type: string
    nonceChallenge:
      required:
      - keyId
      - nonce
      type: object
      properties:
        nonce:
          type: string
          format: uuid
        keyId:
          type: string
  responses:
    erOttResponse:
      description: "A response containing the edge routers signed certificates (server\
        \ chain, server cert, CAs)."
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/enrollmentCertsEnvelope'
    routerExtendEnrollmentResponse:
      description: "A response containing the edge routers new signed certificates\
        \ (server chain, server cert, CAs)."
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/enrollmentCertsEnvelope'
    enrollmentCerts:
      description: A response containing and identities client certificate chains
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/enrollmentCertsEnvelope'
    stringResponse:
      description: A response for multi-format legacy enrollment.
      content:
        '*/*':
          schema:
            type: string
    getJwksResponse:
      description: A JWKS response for enrollment.
      content:
        '*/*':
          schema:
            $ref: ../shared/jwks.yml#/definitions/jwks
    nonceChallengeResponse:
      description: "A nonce challenge response. The contents will be the signature\
        \ of the nonce, the key id used, and algorithm used to produce the signature."
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/nonceSignature'
x-original-swagger-version: null
