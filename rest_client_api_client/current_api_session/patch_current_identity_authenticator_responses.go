// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package current_api_session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openziti/edge-api/rest_model"
)

// PatchCurrentIdentityAuthenticatorReader is a Reader for the PatchCurrentIdentityAuthenticator structure.
type PatchCurrentIdentityAuthenticatorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchCurrentIdentityAuthenticatorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchCurrentIdentityAuthenticatorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchCurrentIdentityAuthenticatorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchCurrentIdentityAuthenticatorUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchCurrentIdentityAuthenticatorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /current-identity/authenticators/{id}] patchCurrentIdentityAuthenticator", response, response.Code())
	}
}

// NewPatchCurrentIdentityAuthenticatorOK creates a PatchCurrentIdentityAuthenticatorOK with default headers values
func NewPatchCurrentIdentityAuthenticatorOK() *PatchCurrentIdentityAuthenticatorOK {
	return &PatchCurrentIdentityAuthenticatorOK{}
}

/*
PatchCurrentIdentityAuthenticatorOK describes a response with status code 200, with default header values.

The patch request was successful and the resource has been altered
*/
type PatchCurrentIdentityAuthenticatorOK struct {
	Payload *rest_model.Empty
}

// IsSuccess returns true when this patch current identity authenticator o k response has a 2xx status code
func (o *PatchCurrentIdentityAuthenticatorOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch current identity authenticator o k response has a 3xx status code
func (o *PatchCurrentIdentityAuthenticatorOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch current identity authenticator o k response has a 4xx status code
func (o *PatchCurrentIdentityAuthenticatorOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch current identity authenticator o k response has a 5xx status code
func (o *PatchCurrentIdentityAuthenticatorOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch current identity authenticator o k response a status code equal to that given
func (o *PatchCurrentIdentityAuthenticatorOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch current identity authenticator o k response
func (o *PatchCurrentIdentityAuthenticatorOK) Code() int {
	return 200
}

func (o *PatchCurrentIdentityAuthenticatorOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /current-identity/authenticators/{id}][%d] patchCurrentIdentityAuthenticatorOK %s", 200, payload)
}

func (o *PatchCurrentIdentityAuthenticatorOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /current-identity/authenticators/{id}][%d] patchCurrentIdentityAuthenticatorOK %s", 200, payload)
}

func (o *PatchCurrentIdentityAuthenticatorOK) GetPayload() *rest_model.Empty {
	return o.Payload
}

func (o *PatchCurrentIdentityAuthenticatorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.Empty)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCurrentIdentityAuthenticatorBadRequest creates a PatchCurrentIdentityAuthenticatorBadRequest with default headers values
func NewPatchCurrentIdentityAuthenticatorBadRequest() *PatchCurrentIdentityAuthenticatorBadRequest {
	return &PatchCurrentIdentityAuthenticatorBadRequest{}
}

/*
PatchCurrentIdentityAuthenticatorBadRequest describes a response with status code 400, with default header values.

The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information
*/
type PatchCurrentIdentityAuthenticatorBadRequest struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this patch current identity authenticator bad request response has a 2xx status code
func (o *PatchCurrentIdentityAuthenticatorBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch current identity authenticator bad request response has a 3xx status code
func (o *PatchCurrentIdentityAuthenticatorBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch current identity authenticator bad request response has a 4xx status code
func (o *PatchCurrentIdentityAuthenticatorBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch current identity authenticator bad request response has a 5xx status code
func (o *PatchCurrentIdentityAuthenticatorBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch current identity authenticator bad request response a status code equal to that given
func (o *PatchCurrentIdentityAuthenticatorBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the patch current identity authenticator bad request response
func (o *PatchCurrentIdentityAuthenticatorBadRequest) Code() int {
	return 400
}

func (o *PatchCurrentIdentityAuthenticatorBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /current-identity/authenticators/{id}][%d] patchCurrentIdentityAuthenticatorBadRequest %s", 400, payload)
}

func (o *PatchCurrentIdentityAuthenticatorBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /current-identity/authenticators/{id}][%d] patchCurrentIdentityAuthenticatorBadRequest %s", 400, payload)
}

func (o *PatchCurrentIdentityAuthenticatorBadRequest) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PatchCurrentIdentityAuthenticatorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCurrentIdentityAuthenticatorUnauthorized creates a PatchCurrentIdentityAuthenticatorUnauthorized with default headers values
func NewPatchCurrentIdentityAuthenticatorUnauthorized() *PatchCurrentIdentityAuthenticatorUnauthorized {
	return &PatchCurrentIdentityAuthenticatorUnauthorized{}
}

/*
PatchCurrentIdentityAuthenticatorUnauthorized describes a response with status code 401, with default header values.

The supplied session does not have the correct access rights to request this resource
*/
type PatchCurrentIdentityAuthenticatorUnauthorized struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this patch current identity authenticator unauthorized response has a 2xx status code
func (o *PatchCurrentIdentityAuthenticatorUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch current identity authenticator unauthorized response has a 3xx status code
func (o *PatchCurrentIdentityAuthenticatorUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch current identity authenticator unauthorized response has a 4xx status code
func (o *PatchCurrentIdentityAuthenticatorUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch current identity authenticator unauthorized response has a 5xx status code
func (o *PatchCurrentIdentityAuthenticatorUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch current identity authenticator unauthorized response a status code equal to that given
func (o *PatchCurrentIdentityAuthenticatorUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the patch current identity authenticator unauthorized response
func (o *PatchCurrentIdentityAuthenticatorUnauthorized) Code() int {
	return 401
}

func (o *PatchCurrentIdentityAuthenticatorUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /current-identity/authenticators/{id}][%d] patchCurrentIdentityAuthenticatorUnauthorized %s", 401, payload)
}

func (o *PatchCurrentIdentityAuthenticatorUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /current-identity/authenticators/{id}][%d] patchCurrentIdentityAuthenticatorUnauthorized %s", 401, payload)
}

func (o *PatchCurrentIdentityAuthenticatorUnauthorized) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PatchCurrentIdentityAuthenticatorUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCurrentIdentityAuthenticatorNotFound creates a PatchCurrentIdentityAuthenticatorNotFound with default headers values
func NewPatchCurrentIdentityAuthenticatorNotFound() *PatchCurrentIdentityAuthenticatorNotFound {
	return &PatchCurrentIdentityAuthenticatorNotFound{}
}

/*
PatchCurrentIdentityAuthenticatorNotFound describes a response with status code 404, with default header values.

The requested resource does not exist
*/
type PatchCurrentIdentityAuthenticatorNotFound struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this patch current identity authenticator not found response has a 2xx status code
func (o *PatchCurrentIdentityAuthenticatorNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch current identity authenticator not found response has a 3xx status code
func (o *PatchCurrentIdentityAuthenticatorNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch current identity authenticator not found response has a 4xx status code
func (o *PatchCurrentIdentityAuthenticatorNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch current identity authenticator not found response has a 5xx status code
func (o *PatchCurrentIdentityAuthenticatorNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch current identity authenticator not found response a status code equal to that given
func (o *PatchCurrentIdentityAuthenticatorNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the patch current identity authenticator not found response
func (o *PatchCurrentIdentityAuthenticatorNotFound) Code() int {
	return 404
}

func (o *PatchCurrentIdentityAuthenticatorNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /current-identity/authenticators/{id}][%d] patchCurrentIdentityAuthenticatorNotFound %s", 404, payload)
}

func (o *PatchCurrentIdentityAuthenticatorNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /current-identity/authenticators/{id}][%d] patchCurrentIdentityAuthenticatorNotFound %s", 404, payload)
}

func (o *PatchCurrentIdentityAuthenticatorNotFound) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PatchCurrentIdentityAuthenticatorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
