// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package enroll

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// EnrollmentChallengeHandlerFunc turns a function with the right signature into a enrollment challenge handler
type EnrollmentChallengeHandlerFunc func(EnrollmentChallengeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn EnrollmentChallengeHandlerFunc) Handle(params EnrollmentChallengeParams) middleware.Responder {
	return fn(params)
}

// EnrollmentChallengeHandler interface for that can handle valid enrollment challenge params
type EnrollmentChallengeHandler interface {
	Handle(EnrollmentChallengeParams) middleware.Responder
}

// NewEnrollmentChallenge creates a new http.Handler for the enrollment challenge operation
func NewEnrollmentChallenge(ctx *middleware.Context, handler EnrollmentChallengeHandler) *EnrollmentChallenge {
	return &EnrollmentChallenge{Context: ctx, Handler: handler}
}

/* EnrollmentChallenge swagger:route POST /enroll/challenge Enroll enrollmentChallenge

Allows verification of a controller or cluster of controllers as being the valid target for enrollment.

A caller may submit a nonce and a key id (kid) from the enrollment JWKS endpoint or enrollment JWT that will
be used to sign the nonce. The resulting signature may be validated with the associated public key in order
to verify a networks identity during enrollment. The nonce must be a valid formatted UUID.


*/
type EnrollmentChallenge struct {
	Context *middleware.Context
	Handler EnrollmentChallengeHandler
}

func (o *EnrollmentChallenge) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewEnrollmentChallengeParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
